<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>A beautiful narrative written over an elegant publishing platform. The story begins here...</description>
    <link>http://hellodk.in///</link>
    <atom:link href="http://hellodk.in///feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 16 Jan 2019 16:03:24 +0530</pubDate>
    <lastBuildDate>Wed, 16 Jan 2019 16:03:24 +0530</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Resume</title>
        <description>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/css/hr_tag.css&quot; /&gt;
	&lt;title&gt;Curriculum Vitae&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Deepak Gupta&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Email: hello.dk@outlook.com&lt;/li&gt;
&lt;li&gt;About.me: &lt;a href=&quot;https://about.me/hellodk&quot;&gt;https://about.me/hellodk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blog: &lt;a href=&quot;https://www.hellodk.in&quot;&gt;https://www.hellodk.in&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;Github: &lt;a href=&quot;https://github.com/hellodk&quot;&gt;https://github.com/hellodk&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;LinkedIn: &lt;a href=&quot;https://www.linkedin.com/in/hellodk&quot;&gt;https://www.linkedin.com/in/hellodk&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;Docker Hub: &lt;a href=&quot;https://hub.docker.com/r/hellodk&quot;&gt;https://hub.docker.com/r/hellodk&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
	Professional Summary:
&lt;/h3&gt;
&lt;p&gt;
Armed with the drive, motivation and self-determination to succeed, I have continually provided above average results while also learning and developing along the way. I work extremely well independently as well as within a team to deliver measurable results based on the business goals. I am a responsible, self-motivated, smart working, dedicated and always considerate of others.
&lt;/p&gt;
&lt;p&gt;
I come from a Java background where I have been developing several tools and solutions over Java and it&#39;s associated frameworks like Spring/Struts using the Agile methodology.
&lt;/p&gt;
I have primarily been building tools for SysOps/DevOps which can vary from automating tools to monitoring services, web applications, exposing restful API&#39;s or creating interfaces using CORBA to facilitate communication between systems deployed over diverse platforms and have also extensively worked with messaging queue services like Rabbitmq and Apache Kafka. I was responsible for the setup, clustering and monitoring/maintaining the entire fleet of messaging services(both RabbitMQ and Kafka) which served as a mechanism for intercommunication to over 300 microservices in HA mode without downtime.
Besides I have also been working on Blockchain Technology and have developed a few projects on Blockchain and created own cryptocurrency for testing/learning purpose.
&lt;/p&gt;
&lt;p&gt;
Implemented Disaster Recovery management system over Docker and Kubernetes and also migrated existing pre-prod and staging environments over Docker.
I also have also contributed extensively in making different dashboards as part of key performance indicators for multiple clients and have architectured scalable cloud-based(AWS/Azure) applications with extensive use of load balancing tools like HA Proxy, Nginx.
&lt;/p&gt;
&lt;p&gt;
Currently, I am working as a Corporate Trainer, where I train people from various organisations across the globe primarily on DevOps tools and techniques.
&lt;/p&gt;
&lt;hr class=&quot;bigHr&quot;&gt;
&lt;h3&gt;
Work Experience:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Freelancer (June 2018 onwards)&lt;/li&gt;
&lt;li&gt;DevOps Lead, MoveinSync Solutions (January 2018 - June 2018)&lt;/li&gt;
&lt;li&gt;Systems/DevOps Engineer, Myntra Designs(June 2016 - January 2018)&lt;/li&gt;
&lt;li&gt;DevOps Engineer, Knowlarity Communications(February 2015 - May 2016)&lt;/li&gt;
&lt;li&gt;Software Engineer - Wipro Technologies(November 2011 - January 2015)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr class=&quot;bigHr&quot;&gt;
&lt;h3&gt;
	Software Skills:
&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Programming: 	Python, Java, Golang, Nodejs, C(Agile/Kanban Methodology)&lt;/li&gt;
&lt;li&gt;Web Frameworks: Django, Spring Boot, Flask, Falcon, Spring Cloud&lt;/li&gt;
&lt;li&gt;RDBMS:			MySQL, Postgresql, MariaDB&lt;/li&gt;
&lt;li&gt;NoSQL: Cassandra, Dynamodb, Rethinkdb, MongoDB, Redis, CouchDB&lt;/li&gt;
&lt;li&gt;Monitoring Tools: Nagios, Shinken, Zabbix, Sensu, Icinga2&lt;/li&gt;
&lt;li&gt;Build Tools: Jenkins, Jira, Gerrit&lt;/li&gt;
&lt;li&gt;Cryptocurrency: Blockchain, Bitcoin, Ethereum, Hyperledger&lt;/li&gt;
&lt;li&gt;Load balancers: HA Proxy, Nginx&lt;/li&gt;
&lt;li&gt;CDN: Akamai, CloudFront, Cloudflare&lt;/li&gt;
&lt;li&gt;Web/App servers: Nginx, Apache, Gunicorn, uwsgi, tomcat&lt;/li&gt;
&lt;li&gt;Configuration Management: Ansible, Saltstack, Fabric, Puppet, Chef&lt;/li&gt;
&lt;li&gt;Protocols/ Architectures:	REST, CORBA, SNMP, HTTP, TCP/IP, SIP, Wireshark&lt;/li&gt;
&lt;li&gt;Cloud/ Virtualizations: AWS, Azure, Heroku, OpenStack, Vagrant, KVM, Docker&lt;/li&gt;
&lt;li&gt;Visualizations: Grafana, D3, Kibana, Talend&lt;/li&gt;
&lt;li&gt;Others: RaspberryPi, Spartan 3E, AVR, Elasticsearch, Induino, Arduino, MOSHELL, Debian Packaging, freeswitch, WCDMA, LTE, 3PP, NMS, EMS, FCAPS, RNC, RBS, Scribe, Logstash, Fluentd,heka&lt;/li&gt;
&lt;/ol&gt;
&lt;hr class=&quot;bigHr&quot;&gt;
&lt;h2&gt;
	Projects Summary:
&lt;/h2&gt;
&lt;ol&gt;
	&lt;li&gt;
&lt;h3&gt;Disaster Recovery
&lt;/h3&gt;&lt;/li&gt;
&lt;p&gt;Creating DR infrastructure, requirement gathering and creation of Kubernetes cluster on bare metal servers and implementing the deployment pipelines - blue-green and canary
Infrastructure &amp; service monitoring, sending alerts over slack and SMS
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;Payments Service:
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
Create payments service for facilitating payments transactions using Java and Spring Boot and implementing analytics with Talend to monitor the payments/orders. Invoved in Sprint Planning, Requirement gathering, Architecture planning, writing unit test-cases, coding configuration of the cluster, managing shards/replicas of the payments database, coordinating UAT and SIT and load tests
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;Centralized Log Management:
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
To monitor logs centrally, we needed a powerful tool. Elasticsearch is what we choose for this project and developed on top of Java using Spring Cloud. Initiated the requirement gathering, created UML diagrams, architecture planning, automated deployment &amp; configuration of the cluster, managing shards and the replicas for elasticsearch cluster, analytics on the data using talend
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;
PCI Compliance:
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
Ensured the Payments setup is PCI DSS compliant by creating network segmentations for servers(DMZ environment) and implementing Intrusion Detection Systems(OSSEC/Alienvault) &amp; patching(Spacewalk) the air gapped systems. Responsible for getting the VAPT(Vulnerability Assessment &amp; Penetration Testing)
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;
	Apollo:
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
App deployment via one click using Ansible, Docker and Kubernetes by  automatically creating templates for tasks using jinja2 templating systems and wrote executors, setting up Jenkins jobs etc.
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;
Sethji:
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
Track AWS/Azure Billing Charges
Bill analysis using ETL &amp; Setup the billing management stack on python and flask
reduced billing costs by 25% by identifying overprovisioned/unused services etc.
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;
	Graphite Grafana Integration
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
monitor services, function calls, throughput, response code status, revenue etc.
Requirement gathering, UML, coding, writing automation, configuration and deployment on Python
&lt;/p&gt;

&lt;li&gt;
&lt;h3&gt;
	Monitoring Setup
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
	Monitoring for complete Infrastructure
Setup monitoring for our infrastructure(hybrid) over Icinga2/Zabbix and Talend
Ensured High Availability of Services
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;
	Daily Operations
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
	Day to day operations
Developing new features over Java/Python/Golang
Security Audit - Implemented IDS, DDOS mitigation via fail2ban
packet tracing/filtering using Wireshark
Recovered security vulnerabilities in infrastructure
Implemented key rotation policy
Implemented HA and reliable RabbitMQ cluster in the infrastructure which served as a backbone for intercommunication between microservices(close to 200+ microservices) with 0 downtime
DNS, LDAP, Monitoring, Load Balancing over Nginx/HA Proxy
setup network planning for infrastructure migration
reduce data transfer costs &amp; improved performance
subnet planning helped reduce the complexity of whitelisting services/IP’s
Helped setup Azure account with basic services like DNS, LDAP, monitoring
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;
	Clickstream Analytics
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
A single point to handle all clickstream data and do analytics on that
Integrating the existing SQL databases with ETL(Talend) and creating dashboards
Fine details like demography, geographic locations, time etc were extracted
Used the analytics data to create recommendation engine
&lt;/p&gt;

&lt;li&gt;
&lt;h3&gt;
	WRAN CM OSS-RC (Operational Support System – Radio &amp; Core)
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
OSS-RC is a comprehensive domain manager for network infrastructure deployed with operators around the world integrating and managing a wide range of network components. Together with IP and Broadband offering, it’s a comprehensive solution for total network management of the telecommunications infrastructure
Design of OSSRC products, configuring network elements of OSS-RC using Spring/Java
Sprint Planning, Requirement gathering, Implementation for new changes proposed, creating user stories
followed Test Driven Development, Coordinating in SIT, UAT
&lt;/p&gt;
&lt;li&gt;
&lt;h3&gt;
	Cloud Adapter
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
Integrate cloud services with services on physical machines for centralized monitoring
Set up the development environment, configurations, writing test cases using J-unit
wrote authentication modules, schedulers, startup scripts, managing notifications on Java
&lt;/p&gt;
&lt;li&gt;
&lt;h3&gt;
	Billing Framework
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
The most challenging work for any organisation, taking care of different types of contracts etc.
Created the Billing Framework using Python and Django
&lt;/p&gt;
&lt;li&gt;
&lt;h3&gt;
	NDNC Deployment
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
Being a telemarketer, we can call only to non-dnd registered numbers
TRAI only provides dnd data in form of CSV(500 million rows)
Challenge was to develop our own NDNC scrubbing solution and keep it updated using Spring Boot
Requirement gathering, UML/flow diagrams getting the NDNC data, feeding the data into our database, writing API&#39;s, automated product deployment automation, performance tuning etc. using Python/Falcon and RethinkDB
&lt;/p&gt;&lt;/ol&gt;
&lt;hr class=&quot;bigHr&quot;&gt;
&lt;h3&gt;
	Side Projects
&lt;/h3&gt;
&lt;ol&gt;
&lt;p&gt;
&lt;li&gt;Developed several multiplayer games in Python, e.g. Stopwatch, Pong, Memory, Spaceship, Blackjack &amp; Rice Rocks Full Game
&lt;/li&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;li&gt;
RTL design &amp; Synthesis of a 32-bit Microprocessor using VHDL
&lt;/li&gt;
Our goal was to design a 32-bit microprocessor in VHDL, which will perform arithmetic and logic function that is on a standard 32-bit microprocessor
Target Device: Spartan 3E Tools
Used: Xilinx 9.1, Modelsim SE 5.7f
&lt;/p&gt;

&lt;p&gt;
&lt;li&gt;
Blockchain Signalling System
&lt;/li&gt;
Used blockchain for Signalling DDOS attacks in a cooperative &amp; distributed network defence
&lt;/p&gt;

&lt;p&gt;
&lt;li&gt;
Real-time Bitcoin Price Monitor using Arduino
&lt;/li&gt;
&lt;/p&gt;

&lt;p&gt;
	&lt;li&gt;
Decentralized fleet tracking with blockchain
&lt;/li&gt;
Asset tracking mechanism in a decentralized fashion. Each action, event, alerts were stored in the blockchain
&lt;/p&gt;

&lt;p&gt;
&lt;li&gt;
Developed an own cryptocurrency for testing purpose using Litecoin
&lt;/li&gt;
&lt;/p&gt;
&lt;/ol&gt;

&lt;hr class=&quot;bigHr&quot;&gt;

&lt;h3&gt;
	Awards &amp; Achievements:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Maestro Award for Making a Difference in the Account&lt;/li&gt;
&lt;li&gt;High Flyer Award for individual contribution in the Account&lt;/li&gt;
&lt;/ol&gt;

&lt;hr class=&quot;bigHr&quot;&gt;

&lt;h3&gt;
Certifications:
&lt;/h3&gt;

&lt;ol&gt;
	&lt;li&gt;Big Data, Cloud Computing, &amp; CDN Emerging Technologies&lt;/li&gt;
	&lt;li&gt;Blockchain for Developers&lt;/li&gt;
	&lt;li&gt;Interfacing with the Raspberry Pi&lt;/li&gt;
	&lt;li&gt;An Introduction to Interactive Programming with Python(RICE University)&lt;/li&gt;
&lt;/ol&gt;

&lt;/body&gt;
&lt;/html&gt;</description>
        <pubDate>Tue, 15 Jan 2019 00:00:00 +0530</pubDate>
        <link>http://hellodk.in///resume</link>
        <guid isPermaLink="true">http://hellodk.in///resume</guid>
        
        
      </item>
    
      <item>
        <title>Resume</title>
        <description>&lt;h4&gt;Deepak Gupta&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Email: hello.dk@outlook.com&lt;/li&gt;
&lt;li&gt;About.me: &lt;a href=&quot;&quot;&gt;&lt;span style=&quot;color:blue&quot;&gt;https://about.me/hellodk&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blog: &lt;a href=&quot;&quot;&gt;&lt;span style=&quot;color:blue&quot;&gt;https://www.hellodk.in&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github: &lt;a href=&quot;&quot;&gt;&lt;span style=&quot;color:blue&quot;&gt;https://github.com/hellodk&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LinkedIn: &lt;a href=&quot;&quot;&gt;&lt;span style=&quot;color:blue&quot;&gt;https://www.linkedin.com/in/hellodk&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker Hub: &lt;a href=&quot;&quot;&gt;&lt;span style=&quot;color:blue&quot;&gt;https://hub.docker.com/r/hellodk&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Professional Summary:&lt;/h5&gt;

&lt;p&gt;Armed with the drive, motivation and self-determination to succeed, I have continually provided above average results while also learning and developing along the way. I work extremely well independently as well as within a team to deliver measurable results based on the business goals. I am a responsible, self-motivated, smart working, dedicated and always considerate of others.&lt;/p&gt;

&lt;p&gt;I come from a Java background where I have been developing several tools and solutions over Java and it’s associated frameworks like Spring/Struts using the Agile methodology.&lt;/p&gt;

&lt;p&gt;I have primarily been building tools for SysOps/DevOps which can vary from automating tools to monitoring services, web applications, exposing restful API&amp;#39;s or creating interfaces using CORBA to facilitate communication between systems deployed over diverse platforms and have also extensively worked with messaging queue services like Rabbitmq and Apache Kafka. I was responsible for the setup, clustering and monitoring/maintaining the entire fleet of messaging services(both RabbitMQ and Kafka) which served as a mechanism for intercommunication to over 300 microservices in HA mode without downtime.
Besides I have also been working on Blockchain Technology and have developed a few projects on Blockchain and created own cryptocurrency for testing/learning purpose.&lt;/p&gt;

&lt;p&gt;Implemented Disaster Recovery management system over Docker and Kubernetes and also migrated existing pre-prod and staging environments over Docker.
I also have also contributed extensively in making different dashboards as part of key performance indicators for multiple clients and have architectured scalable cloud-based(AWS/Azure) applications with extensive use of load balancing tools like HA Proxy, Nginx.&lt;/p&gt;

&lt;p&gt;Currently, I am working as a Corporate Trainer, where I train people from various organisations across the globe primarily on DevOps tools and techniques.&lt;/p&gt;

&lt;h6&gt;Work Experience:&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Freelancer (June 2018 onwards)&lt;/li&gt;
&lt;li&gt;DevOps Lead, MoveinSync Solutions (January 2018 - June 2018)&lt;/li&gt;
&lt;li&gt;Systems/DevOps Engineer, Myntra Designs(June 2016 - January 2018)&lt;/li&gt;
&lt;li&gt;DevOps Engineer, Knowlarity Communications(February 2015 - May 2016)&lt;/li&gt;
&lt;li&gt;Software Engineer - Wipro Technologies(November 2011 - January 2015)&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;Software Skills:&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Programming: Python, Java, Golang, Nodejs, C(Agile/Kanban Methodology)&lt;/li&gt;
&lt;li&gt;Web Frameworks: Django, Spring Boot, Flask, Falcon, Spring Cloud&lt;/li&gt;
&lt;li&gt;RDBMS: MySQL, Postgresql, MariaDB&lt;/li&gt;
&lt;li&gt;NoSQL: Cassandra, Dynamodb, Rethinkdb, MongoDB, Redis, CouchDB&lt;/li&gt;
&lt;li&gt;Monitoring Tools: Nagios, Shinken, Zabbix, Sensu, Icinga2&lt;/li&gt;
&lt;li&gt;Build Tools: Jenkins, Jira, Gerrit&lt;/li&gt;
&lt;li&gt;Cryptocurrency: Blockchain, Bitcoin, Ethereum, Hyperledger&lt;/li&gt;
&lt;li&gt;Load balancers: HA Proxy, Nginx&lt;/li&gt;
&lt;li&gt;CDN: Akamai, CloudFront, Cloudflare&lt;/li&gt;
&lt;li&gt;Web/App servers: Nginx, Apache, Gunicorn, uwsgi, tomcat&lt;/li&gt;
&lt;li&gt;Configuration Management: Ansible, Saltstack, Fabric, Puppet, Chef&lt;/li&gt;
&lt;li&gt;Protocols/ Architectures: REST, CORBA, SNMP, HTTP, TCP/IP, SIP, Wireshark&lt;/li&gt;
&lt;li&gt;Cloud/ Virtualizations: AWS, Azure, Heroku, OpenStack, Vagrant, KVM, Docker&lt;/li&gt;
&lt;li&gt;Visualizations: Grafana, D3, Kibana, Talend&lt;/li&gt;
&lt;li&gt;Others: RaspberryPi, Spartan 3E, AVR, Elasticsearch, Induino, Arduino, MOSHELL, Debian Packaging, freeswitch, WCDMA, LTE, 3PP, NMS, EMS, FCAPS, RNC, RBS, Scribe, Logstash, Fluentd,heka&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;Projects Summary:&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Disaster Recovery
Creating DR infrastructure, requirement gathering and creation of Kubernetes cluster on bare metal servers and implementing the deployment pipelines - blue-green and canary
Infrastructure &amp;amp; service monitoring, sending alerts over slack and SMS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Payments Service:
Create payments service for facilitating payments transactions using Java and Spring Boot and implementing analytics with Talend to monitor the payments/orders. Invoved in Sprint Planning, Requirement gathering, Architecture planning, writing unit test-cases, coding configuration of the cluster, managing shards/replicas of the payments database, coordinating UAT and SIT and load tests&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Centralized Log Management:
To monitor logs centrally, we needed a powerful tool. Elasticsearch is what we choose for this project and developed on top of Java using Spring Cloud. Initiated the requirement gathering, created UML diagrams, architecture planning, automated deployment &amp;amp; configuration of the cluster, managing shards and the replicas for elasticsearch cluster, analytics on the data using talend&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PCI Compliance:
Ensured the Payments setup is PCI DSS compliant by creating network segmentations for servers(DMZ environment) and implementing Intrusion Detection Systems(OSSEC/Alienvault) &amp;amp; patching(Spacewalk) the air gapped systems. Responsible for getting the VAPT(Vulnerability Assessment &amp;amp; Penetration Testing)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apollo:
App deployment via one click using Ansible, Docker and Kubernetes by  automatically creating templates for tasks using jinja2 templating systems and wrote executors, setting up Jenkins jobs etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sethji:
Track AWS/Azure Billing Charges
Bill analysis using ETL &amp;amp; Setup the billing management stack on python and flask
reduced billing costs by 25% by identifying overprovisioned/unused services etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Graphite Grafana Integration:
monitor services, function calls, throughput, response code status, revenue etc.
Requirement gathering, UML, coding, writing automation, configuration and deployment on Python&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Monitoring Setup:
Monitoring for complete Infrastructure
Setup monitoring for our infrastructure(hybrid) over Icinga2/Zabbix and Talend
Ensured High Availability of Services&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Daily Operations:
Day to day operations
Developing new features over Java/Python/Golang
Security Audit - Implemented IDS, DDOS mitigation via fail2ban
packet tracing/filtering using Wireshark
Recovered security vulnerabilities in infrastructure
Implemented key rotation policy
Implemented HA and reliable RabbitMQ cluster in the infrastructure which served as a backbone for intercommunication between microservices(close to 200+ microservices) with 0 downtime
DNS, LDAP, Monitoring, Load Balancing over Nginx/HA Proxy
setup network planning for infrastructure migration
reduce data transfer costs &amp;amp; improved performance
subnet planning helped reduce the complexity of whitelisting services/IP’s
Helped setup Azure account with basic services like DNS, LDAP, monitoring&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clickstream Analytics
A single point to handle all clickstream data and do analytics on that
Integrating the existing SQL databases with ETL(Talend) and creating dashboards
Fine details like demography, geographic locations, time etc were extracted
Used the analytics data to create recommendation engine&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WRAN CM OSS-RC (Operational Support System – Radio &amp;amp; Core):
OSS-RC is a comprehensive domain manager for network infrastructure deployed with operators around the world integrating and managing a wide range of network components. Together with IP and Broadband offering, it’s a comprehensive solution for total network management of the telecommunications infrastructure
Design of OSSRC products, configuring network elements of OSS-RC using Spring/Java
Sprint Planning, Requirement gathering, Implementation for new changes proposed, creating user stories
followed Test Driven Development, Coordinating in SIT, UAT&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cloud Adapter:
Integrate cloud services with services on physical machines for centralized monitoring
Set up the development environment, configurations, writing test cases using J-unit
wrote authentication modules, schedulers, startup scripts, managing notifications on Java&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Billing Framework: 
The most challenging work for any organisation, taking care of different types of contracts etc.
Created the Billing Framework using Python and Django&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NDNC Deployment: 
Being a telemarketer, we can call only to non-dnd registered numbers
TRAI only provides dnd data in form of CSV(500 million rows)
Challenge was to develop our own NDNC scrubbing solution and keep it updated using Spring Boot
Requirement gathering, UML/flow diagrams getting the NDNC data, feeding the data into our database, writing API&amp;#39;s, automated product deployment automation, performance tuning etc. using Python/Falcon and RethinkDB&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Side Projects:
Developed several multiplayer games in Python, e.g. Stopwatch, Pong, Memory, Spaceship, Blackjack &amp;amp; Rice Rocks Full Game&lt;/p&gt;

&lt;p&gt;RTL design &amp;amp; Synthesis of a 32-bit Microprocessor using VHDL:
Our goal was to design a 32-bit microprocessor in VHDL, which will perform arithmetic and logic function that is on a standard 32-bit microprocessor
Target Device: Spartan 3E Tools
Used: Xilinx 9.1, Modelsim SE 5.7f&lt;/p&gt;

&lt;p&gt;Blockchain Signalling System:
Used blockchain for Signalling DDOS attacks in a cooperative &amp;amp; distributed network defence&lt;/p&gt;

&lt;p&gt;Real-time Bitcoin Price Monitor using Arduino&lt;/p&gt;

&lt;p&gt;Decentralized fleet tracking with blockchain:
           Asset tracking mechanism in a decentralized fashion
           Each action, event, alerts were stored in the blockchain&lt;/p&gt;

&lt;p&gt;Developed an own cryptocurrency for testing purpose using Litecoin&lt;/p&gt;

&lt;p&gt;AWARDS &amp;amp; ACHIEVEMENTS:
Maestro Award for Making a Difference in the Account
High Flyer Award for individual contribution in the Account&lt;/p&gt;

&lt;p&gt;Certifications:
Big Data, Cloud Computing, &amp;amp; CDN Emerging Technologies
Blockchain for Developers
Interfacing with the Raspberry Pi
An Introduction to Interactive Programming with Python(RICE University)&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Apr 2018 00:00:00 +0530</pubDate>
        <link>http://hellodk.in///resume</link>
        <guid isPermaLink="true">http://hellodk.in///resume</guid>
        
        
      </item>
    
      <item>
        <title>A Failed Trek to Everest Base Camp</title>
        <description></description>
        <pubDate>Fri, 02 Mar 2018 01:18:00 +0000</pubDate>
        <link>http://hellodk.in///failed_trek_to_everest_base_camp</link>
        <guid isPermaLink="true">http://hellodk.in///failed_trek_to_everest_base_camp</guid>
        
        <category>travel</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>just landed in Malaysia - Truly Asia</title>
        <description></description>
        <pubDate>Sat, 24 Feb 2018 06:30:00 +0000</pubDate>
        <link>http://hellodk.in///just_landed_in_malaysia</link>
        <guid isPermaLink="true">http://hellodk.in///just_landed_in_malaysia</guid>
        
        <category>travel</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Fancy Bear DDoS for Ransom</title>
        <description>&lt;html&gt;
Threat Summary : ERT Threat Alert - Fancy Bear DDoS for Ransom
 
Radware’s Emergency Response Team (ERT) has identified an emerging
ransom denial-of-service (RDoS) campaign from a group identifying itself as Fancy Bear. The group has been distributing extortion emails to payment processing vendors in multiple locations across the globe.
In RDoS attacks, the perpetrators send a letter threatening to attack an organization—rendering its business, operations or capability unavailable—unless a ransom is paid by the deadline. This extortion method has grown in popularity every year since 2010 and typically come in the form of a volumetric distributed denial-of-service (DDoS) attack. However, it is increasingly in vogue to find techniques that are more piercing and more efficient without generating large volumes. The most advanced attacks combine both volumetric and non-volumetric cyber-attack techniques.
At the end of April, a group claiming to be Fancy Bear began sending out extortion attempts. The extortionist behind this campaign attempted to intimidate their victims by using the name of APT28 (Fancy Bear) and an infamous cyber-espionage group. APT28 is believed to be a nation state-level attacker that uses zero-day exploits and spear phishing attacks to spread malware.
 
Who are affected?
The group claiming to be Fancy Bear is targeting a limited number of financial services organizations – payment processers under the threat of an attack from the Mirai Botnet. Each letter contains a unique bitcoin address. In the note, Fancy Bear listed the IP address of the victim and targeted them with a sample attack.
 
Threat Summary : World&#39;s Biggest Botnet Just Sent 12.5 Million Emails With Scarab Ransomware
 
A massive malicious email campaign that stems from the world&#39;s largest spam botnet Necurs is spreading a new strain of ransomware at the rate of over 2 million emails per hour and hitting computers across the globe.
The popular malspam botnet Necrus which has previously found distributing Dridex banking trojan, Trickbot banking trojan, Locky ransomware, and Jaff ransomware, has now started spreading a new version of Scarab ransomware.
According to F-Secure, Necurs botnet is the most prominent deliverer of spam emails with five to six million infected hosts online monthly and is responsible for the biggest single malware spam campaigns.
Scarab ransomware is a relatively new ransomware family that was initially spotted by ID Ransomware creator Michael Gillespie in June this year.
 
According to the security firm Forcepoint, the massive email campaign spreading Scarab ransomware virus started at approximately 07:30 UTC on 23 November (Thursday) and sent about 12.5 million emails in just six hours.
The Forcepoint researchers said &quot;the majority of the traffic is being sent to the .com top-level domain (TLD). However, this was followed by region-specific TLDs for the United Kingdom, Australia, France, and Germany.&quot;
The spam email contains a malicious VBScript downloader compressed with 7zip that pulls down the final payload, with one of these subject lines:
Scanned from Lexmark
Scanned from Epson
Scanned from HP
Scanned from Canon
As with previous Necurs botnet campaigns, the VBScript contained a number of references to the widely watched series Game of Thrones, like the strings &#39;Samwell&#39; and &#39;JohnSnow.&#39;
The final payload is the latest version of Scarab ransomware with no change in filenames, but it appends a new file extension with &quot;.[suupport@protonmail.com].scarab&quot; to the encrypted files.
Once done with the encryption, the ransomware then drops a ransom note with the filename &quot;IF YOU WANT TO GET ALL YOUR FILES BACK, PLEASE READ THIS.TXT&quot; within each affected directory.
The ransom note does not specify the amount being demanded by the criminals; instead, it merely states that &quot;the price depends on how fast you [the victim] write to us.&quot;
However, Scarab ransomware offers to decrypt three files for free to prove the decryption will work: &quot;Before paying you can send us up to 3 files for free decryption.&quot;
 
How to Protect Yourself:
Keep a good backup routine in place that makes their copies to an external storage device that is not always connected to your PC in order to always have a tight grip on all your important files and documents.
Always be suspicious of any uninvited document sent over an email and should never click on links provided in those documents unless verifying the source.
 
 
Threat Summary : FortiOS web GUI login disclaimer redir parameter XSS vulnerability
 
A reflected XSS vulnerability exists in FortiOS web GUI &quot;Login Disclaimer&quot; redir parameter. It is potentially exploitable by a remote unauthenticated attacker, via sending a maliciously crafted URL to a victim who has an open session on the web GUI. Visiting that malicious URL may cause the execution of arbitrary javascript code in the security context of the victim&#39;s browser.
 
Impact:
Cross-site scripting (XSS)
 
Who are affected?
Firmware Version 5.6: FortiOS 5.6.0
Firmware Version 5.4: FortiOS 5.4.0 to 5.4.5
Other Firmware Version are not affected
 
How to Protect Yourself:
Firmware Version 5.6: Upgrade to FortiOS 5.6.1 or above
Firmware Version 5.4: Upgrade to FortiOS 5.4.6 or above.
 
Reference:
http://fortiguard.com/psirt/FG-IR-17-113
 
Threat Summary : FortiClient privilege escalation vulnerability
 
A low privileged user may be able to execute arbitrary code by exploiting a FortiClient Named Pipe vulnerability.
 
Impact:
Privilege escalation
 
Who are affected?
FortiClient Windows 5.4.1, 5.4.2.
 
How to Protect Yourself:
Upgrade to FortiClient Windows: 5.4.3 or 5.6.0
 
Reference:
http://fortiguard.com/psirt/FG-IR-16-095
&lt;/html&gt;</description>
        <pubDate>Fri, 15 Dec 2017 13:40:00 +0000</pubDate>
        <link>http://hellodk.in///fancy_bear_ddos</link>
        <guid isPermaLink="true">http://hellodk.in///fancy_bear_ddos</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Fancy Bear DDoS for Ransom</title>
        <description>&lt;html&gt;
Threat Summary: Decyphering the Noise Around ‘Meltdown’ and ‘Spectre’

 

The McAfee Advanced Threat Research (ATR) Team has closely followed the attack techniques that have been named Meltdown and Spectre throughout the lead-up to their announcement on January 3.

 

The vulnerabilities been categorized into two attacks, Meltdown (CVE-2017-5754) and Spectre (CVE-2017-5753 and CVE-2017-5715), which could allow attackers to steal sensitive data which is currently processed on the computer.

Both attacks take advantage of a feature in chips known as &quot;speculative execution,&quot; a technique used by most modern CPUs to optimize performance.

&quot;In order to improve performance, many CPUs may choose to speculatively execute instructions based on assumptions that are considered likely to be true. During speculative execution, the processor is verifying these assumptions; if they are valid, then the execution continues. If they are invalid, then the execution is unwound. Therefore, it is possible for such speculative execution to have &quot;side effects which are not restored when the CPU state is unwound and can lead to information disclosure,&quot; which can be accessed using side-channel attacks.

Meltdown Attack: Meltdown attack allows attackers to read not only kernel memory but also the entire physical memory of the target machines, and therefore all secrets of other programs and the operating system. Meltdown uses speculative execution to break the isolation between user applications and the operating system, allowing any application to access all system memory, including memory allocated for the kernel.

Spectre Attack: Spectre attack breaks the isolation between different applications, allowing the attacker-controlled program to trick error-free programs into leaking their secrets by forcing them into accessing arbitrary portions of its memory, which can then be read through a side channel.

Spectre attacks can be used to leak information from the kernel to user programs, as well as from virtualization hypervisors to guest systems.

 

Who are affected?

This vulnerability impacts almost every system, including desktops, laptops, cloud servers, as well as smartphones—powered by Intel, AMD, and ARM chips.

 

How to Protect Yourself:

There is no single fix for both the attacks since each requires protection independently.

·         Windows — Microsoft has issued an out-of-band patch update for Windows 10, while other versions of Windows will be patched on the traditional Patch Tuesday on January 9, 2018

·         MacOS — Apple had already fixed most of these security holes in macOS High Sierra 10.13.2 last month, but MacOS 10.13.3 will enhance or complete these mitigations.

·         Linux — Linux kernel developers have also released patches by implementing kernel page-table isolation (KPTI) to move the kernel into an entirely separate address space.

·         Android — Google has released security patches for Pixel/Nexus users as part of the Android January security patch update.  Other users have to wait for their device manufacturers to release a compatible security update.

·         Allow scripting languages to execute only from trusted sites.

·         Anti Virus vendors like McAfee have some detection capabilities around these threats,  . McAfee Windows Security Suite or McAfee Endpoint Security (ENS) can provide warnings if you visit a known dangerous site.McAfee products can also provide an alternate script-execution engine that prevents known malicious scripts from executing.

 

Reference:

https://thehackernews.com/2018/01/meltdown-spectre-vulnerability.html

https://securingtomorrow.mcafee.com/mcafee-labs/decyphering-the-noise-around-meltdown-and-spectre/
&lt;/html&gt;</description>
        <pubDate>Fri, 15 Dec 2017 13:40:00 +0000</pubDate>
        <link>http://hellodk.in///blue_borne</link>
        <guid isPermaLink="true">http://hellodk.in///blue_borne</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Fancy Bear DDoS for Ransom</title>
        <description>&lt;html&gt;
Threat Summary : The IoT Attack Vector “BlueBorne” Exposes Almost Every Connected Device


Armis Labs revealed a new attack vector endangering major desktop, and IoT operating systems, including Windows, and Linux, and the devices using them. The new vector is dubbed “BlueBorne”, as it spread through the air (airborne) and attacks devices via Bluetooth. BlueBorne allows attackers to take control of devices, access corporate data and networks, penetrate secure “air-gapped” networks, and spread malware laterally to adjacent devices. BlueBorne is an attack vector by which hackers can leverage Bluetooth connections to penetrate and take complete control over targeted devices. The attack does not require the targeted device to be paired to the attacker’s device, or even to be set on discoverable mode. The BlueBorne attack vector can be used to conduct a large range of offenses, including remote code execution as well as Man-in-The-Middle attacks.



Impact:

The BlueBorne attack vector requires no user interaction, is compatible to all software versions, and does not require any preconditions or configurations aside of the Bluetooth being active. Unlike the common misconception, Bluetooth enabled devices are constantly searching for incoming connections from any devices, and not only those they have been paired with. This means a Bluetooth connection can be established without pairing the devices at all. This makes BlueBorne one of the most broad potential attacks found in recent years, and allows an attacker to strike completely undetected.



Who are affected?

Windows - All Windows computers since Windows Vista are affected by the “Bluetooth Pineapple” vulnerability which allows an attacker to perform a Man-in-The-Middle attack (CVE-2017-8628). This vulnerability resides in the Bluetooth stack, and enables the attacker to create a malicious  network interface on the victim’s device, re-configure IP routing and force the device to transmit all communication through it. This attack does not require any user interaction, authentication or pairing, making it also practically invisible.



Linux -  Linux is the underlying operating system for a wide range of devices. The most commercial, and consumer-oriented platform based on Linux is the Tizen OS. All Linux devices running BlueZ are affected by the information leak vulnerability (CVE-2017-1000250).

This vulnerability resides in the SDP server responsible for identifying other services using Bluetooth around the device. The flaw allows the attacker to send a set of crafted requests to the server, causing it to disclose memory bits in response. This can be used by an attacker to expose sensitive data from the Bluetooth process that may also contain encryption keys of Bluetooth communications.



All Linux devices from version 3.3-rc1 (released in October 2011) are affected by the remote code execution vulnerability (CVE-2017-1000251).

This vulnerability was found in the Bluetooth stack of the Linux Kernel, which is the very core of the operating system. An internal flaw in the L2CAP (Logical Link Control and Adaptation Protocol) that is used to connect between two devices causes a memory corruption. An attacker can use this memory corruption to gain full control of the device.



Fix:

Microsoft issued has security patches to all supported Windows versions on July 11, 2017, with coordinated notification on Tuesday, September 12.

A kpatch for customers running Red Hat Enterprise Linux 7.2 or greater will be available. Please open a support case with Red-Hat to gain access to the kpatch. You can also use the below script to check if your Linux servers are vulnerable.

https://access.redhat.com/sites/default/files/cve-2017-1000251-1.sh
&lt;/html&gt;</description>
        <pubDate>Fri, 15 Dec 2017 13:40:00 +0000</pubDate>
        <link>http://hellodk.in///blue_borne</link>
        <guid isPermaLink="true">http://hellodk.in///blue_borne</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Bad Rabbit - New Ransomware Attack</title>
        <description>&lt;html&gt;
Threat Summary : Bad Rabbit: New Ransomware Attack Rapidly Spreading
 
A new widespread ransomware attack is spreading like wildfire around Europe and has already affected over 200 major organisations, primarily in Russia, Ukraine, Turkey and Germany, in the past few hours.
Dubbed &quot;Bad Rabbit,&quot; is reportedly a new Petya-like targeted ransomware attack against corporate networks, demanding 0.05 bitcoin (~ $285) as ransom from victims to unlock their systems.
According to an initial analysis provided by the Kaspersky, the ransomware was distributed via drive-by download attacks, using fake Adobe Flash players installer to lure victims&#39; in to install malware unwittingly.
&quot;No exploits were used, so the victim would have to manually execute the malware dropper, which pretends to be an Adobe Flash installer. We’ve detected a number of compromised websites, all of which were news or media websites.&quot; Kaspersky Lab said.
However, security researchers at ESET have detected Bad Rabbit malware as &#39;Win32/Diskcoder.D&#39; — a new variant of Petya ransomware, also known as Petrwrap, NotPetya, exPetr and GoldenEye.
Bad Rabbit ransomware uses DiskCryptor, an open source full drive encryption software, to encrypt files on infected computers with RSA 2048 keys. Bad Rabbit does not use EternalBlue but does leverage EternalRomance RCE exploit to spread across victims&#39; networks.
Microsoft and F-Secure have also confirmed the presence of the exploit in the Bad Rabbit ransomware. EternalRomance is a remote code execution exploit that takes advantage of a flaw (CVE-2017-0145) in Microsoft&#39;s Windows Server Message Block (SMB), a protocol for transferring data between connected Windows computers, to bypass security over file-sharing connections, thereby enabling remote code execution on Windows clients and servers.
 
Impact:
Bad Rabbit
 first scans the internal network for open SMB shares, tries a hardcoded list of commonly used credentials
 to drop malware, and also uses Mimikatz
 post-exploitation tool to extract credentials from the affected systems. Bad Rabbit can also exploit the Windows Management Instrumentation Command-line (WMIC) scripting interface in an attempt to execute code on other Windows systems on the network remotely, noted
 EndGame. However, according to Cisco&#39;s Talos, Bad Rabbit also carries a code that uses EternalRomance, which allows remote hackers to propagate from an infected computer to other targets more efficiently.
 
How to Protect Yourself:
In order to protect yourself from Bad Rabbit, users are advised to disable WMI service to prevent the malware from spreading over your network.
Update your systems regularly and keep a good and effective anti-virus security suite on your system.
Since most ransomware spread through phishing emails, malicious adverts on websites, and third-party apps and programs, you should always exercise caution before falling for any of these.
Most importantly, to always have a tight grip on your valuable data, keep a good backup routine in place that makes and saves copies of your files to an external storage device that isn&#39;t always connected to your PC.
 
Reference:
https://thehackernews.com/2017/10/bad-rabbit-ransomware-attack.html
&lt;/html&gt;</description>
        <pubDate>Fri, 15 Dec 2017 13:40:00 +0000</pubDate>
        <link>http://hellodk.in///bad_rabbit_attack</link>
        <guid isPermaLink="true">http://hellodk.in///bad_rabbit_attack</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>REST API Best Practices</title>
        <description>&lt;html&gt;
REST API ARCHITECTURE – BEST PRACTICES

SOA(Service Oriented Architecture) has become a foundation for the most of the application that are developed today. A service oriented architecture is an architectural pattern which enables collection of services to communicate with external/internal parties to pass data or for services coordinating. Let’s start from what’s a service.
What’s a Service/API
A service is a function that is well-defined, self-contained, and does not depend on the context or state of other services.
In other words an interface used by software components to communicate with each other. Let understand the difference between API and Web Services. A Web Service is a type of API, almost always one that operates over HTTP. In the modern world there are two types of web services that are used.
SOAP
REST
We can’t compare REST and SOAP since SOAP is a protocol and REST is an architectural pattern. People mostly get confused when selecting one for their application. If you are wondering what’s the difference between these two you can get a good start from here and here.
Our today’s focus is on REST. How we can implement a perfect REST API? What are the best practices? Let’s get down to business.
REST Best Practices 101
1. Abstract vs Concrete
When designing a REST API you should consider to make API concrete as possible. It will make the API less confusing to the consumers.
Abstract vs Concrete 
Abstract vs Concrete
2. CRUD Operations
There are four available methods when designing a REST API which are GET, POST, PUT and DELETE. Below is the proposed methodology to implement CRUD operations in a REST API. Note that this is suggested by me and you can alter this as per your requirement.
Resource	POST	GET	PUT	DELETE
/dog	Create a new dog	List dogs	Replace dogs with new dogs(Bulk update)	 Delete all dogs
/dog/1234	Error	 Show dog	If exist update dog else ERROR	 Delete dog
 
I know there is a confusion resolve around PUT and DELETE. Read more here and here to clarify.
3. Error Handling
Error handling is one that get less attention but most important part of the any REST API. You must give hints as possible for the API consumers about the error and why it has occurred. Also make you that through the API you should provide granular level error messages. You can format it as follows.

{
   &quot;status&quot;: 401,
   &quot;error_code&quot;: 2005,
   &quot;error_message&quot;: &quot;Authentication token has expired&quot;,
   &quot;more_info&quot;: &quot;http://dasunhegoda.com/api/doc/token_error&quot;
}
1
2
3
4
5
6
{
   &quot;status&quot;: 401,
   &quot;error_code&quot;: 2005,
   &quot;error_message&quot;: &quot;Authentication token has expired&quot;,
   &quot;more_info&quot;: &quot;http://dasunhegoda.com/api/doc/token_error&quot;
}
You can make use of HTTP status code for this purpose.
4. API Versioning
In any given API API version is mandatory to maintain consistency. It can be done in many way but below is the preferred methods by me.
Method 1
You can use the letter ‘v’ in the URL to denote the API version as below.

http://dasunhegoda.com/api/v2/dog/1234
1
http://dasunhegoda.com/api/v2/dog/1234
Method 2
You can use the addional parameter at the end of the URL.

http://dasunhegoda.com/api/dog/1234?v=2.0
1
http://dasunhegoda.com/api/dog/1234?v=2.0
Different people have different opinion on API version. You can read more here.
5. Filtering
Don’t provide unnecessary data to the API consumers. It will clutter you REST API unnecessarily. Let the developer choose what he needs. For this we can use filtering methods in our APIs.

/dogs/1234?value1,value2,value3,value4
1
/dogs/1234?value1,value2,value3,value4
Also you can use pagination for this purpose as well where you don’t have to return all the results at once. Below query will be familiar to you since it operates same as MySQL works.

/dogs?limit=25&amp;offset=20

You can read more &lt;a href=&quot;http://stackoverflow.com/questions/5020704/how-to-design-restful-search-filtering&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.
1
2
3
/dogs?limit=25&amp;offset=20
 
You can read more &lt;a href=&quot;http://stackoverflow.com/questions/5020704/how-to-design-restful-search-filtering&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.
6. Security
Security is one of the major concerns when compared to SOAP because still there are no standards such as ws-security defined for REST.
You can use HTTPS across your APIs.
Don’t forget to include timestamp in each and every API request and response. Make sure to log them all. In case of a dispute you can refer them.
Use a access_token to make sure that API is invoked by the trust parties. Beforehand you have to deliver the access_token whereas only API consumers have an access_token can invoke the API. Read more.
7. Analytics
Once you start logging each and every API request and response you can build a analytical platform on top of that. If the number of records are high you might have to consider technologies such as BigData. Having analytics in your REST API will give you a good insight of what’s happening your API.
8. Documentation
Proper Documentation is vital for the API. It doesn’t matter how great your API design is if the API consumers can’t used it properly. You can use tools such as apidocjs for this purpose. It’s really easy to get started.
9. Stability and Consistency
Depending on your requirement you should consider highly available architecture for you REST API. If you are wondering how to implement high availability in your REST API I have an article written on the subject. Please refer here.
10. URL Structure
You have to structure the URL in manner it’s intuitive. Select a domain which is easy for marking as well. eg :- api.yourdomain.com. When structuring your REST API you can use the following format.
GET tasks/5/messages – Retrieves list of messages for task #5
GET tasks/5/messages/10 – Retrieves the 10th messages for task #5
POST tasks/5/messages – Create a new message for task #5
DELETE tasks/5/messages/10 – Delete the 10th messages of task #5
PUT tasks/5/messages/12 – Update the 12th messages of task #5
If you have developed your REST API properly you should have above features in it. In other words above should be kept in mind when designing your REST API. So that’s it about REST API architecture. If you have any questions let me know in the comments below. Your feedback is highly appreciated(happy-face)
&lt;/html&gt;</description>
        <pubDate>Thu, 14 Dec 2017 04:18:00 +0000</pubDate>
        <link>http://hellodk.in///travel_diaries</link>
        <guid isPermaLink="true">http://hellodk.in///travel_diaries</guid>
        
        <category>travel</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Python regex Simplified</title>
        <description>&lt;h2&gt;&lt;u&gt;Introduction&lt;/u&gt;&lt;/h2&gt;

&lt;h3&gt;Python regex metacharacters&lt;/h3&gt;
. ^ $ * + ? { } [ ] \ | ( )

&lt;p&gt;

1. [] - 

Negate - ^

Escape Character - \


The first metacharacters we’ll look at are [ and ]. They’re used for specifying a character class, which is a set of characters that you wish to match. Characters can be listed individually, or a range of characters can be indicated by giving two characters and separating them by a &#39;-&#39;. For example, [abc] will match any of the characters a, b, or c; this is the same as [a-c], which uses a range to express the same set of characters. If you wanted to match only lowercase letters, your RE would be [a-z].

Metacharacters are not active inside classes. For example, [akm$] will match any of the characters &#39;a&#39;, &#39;k&#39;, &#39;m&#39;, or &#39;$&#39;; &#39;$&#39; is usually a metacharacter, but inside a character class it’s stripped of its special nature.

You can match the characters not listed within the class by complementing the set. This is indicated by including a &#39;^&#39; as the first character of the class; &#39;^&#39; outside a character class will simply match the &#39;^&#39; character. For example, [^5] will match any character except &#39;5&#39;.

Perhaps the most important metacharacter is the backslash, \. As in Python string literals, the backslash can be followed by various characters to signal various special sequences. It’s also used to escape all the metacharacters so you can still match them in patterns; for example, if you need to match a [ or \, you can precede them with a backslash to remove their special meaning: \[ or \\.

Some of the special sequences beginning with &#39;\&#39; represent predefined sets of characters that are often useful, such as the set of digits, the set of letters, or the set of anything that isn’t whitespace.

Let’s take an example: \w matches any alphanumeric character. If the regex pattern is expressed in bytes, this is equivalent to the class [a-zA-Z0-9_]. If the regex pattern is a string, \w will match all the characters marked as letters in the Unicode database provided by the unicodedata module. You can use the more restricted definition of \w in a string pattern by supplying the re.ASCII flag when compiling the regular expression.

The following list of special sequences isn’t complete. For a complete list of sequences and expanded class definitions for Unicode string patterns, see the last part of Regular Expression Syntax in the Standard Library reference. In general, the Unicode versions match any character that’s in the appropriate category in the Unicode database.

\d
Matches any decimal digit; this is equivalent to the class [0-9].
\D
Matches any non-digit character; this is equivalent to the class [^0-9].
\s
Matches any whitespace character; this is equivalent to the class [ \t\n\r\f\v].
\S
Matches any non-whitespace character; this is equivalent to the class [^ \t\n\r\f\v].
\w
Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_].
\W
Matches any non-alphanumeric character; this is equivalent to the class [^a-zA-Z0-9_].
These sequences can be included inside a character class. For example, [\s,.] is a character class that will match any whitespace character, or &#39;,&#39; or &#39;.&#39;.

The final metacharacter in this section is .. It matches anything except a newline character, and there’s an alternate mode (re.DOTALL) where it will match even a newline. &#39;.&#39; is often used where you want to match “any character”.
&lt;/p&gt;</description>
        <pubDate>Thu, 13 Jul 2017 03:30:00 +0000</pubDate>
        <link>http://hellodk.in///python_regex_simplified</link>
        <guid isPermaLink="true">http://hellodk.in///python_regex_simplified</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
  </channel>
</rss>
