<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>A beautiful narrative written over an elegant publishing platform. The story begins here...</description>
    <link>http://hellodk.in///</link>
    <atom:link href="http://hellodk.in///feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 09 Oct 2017 17:15:56 +0530</pubDate>
    <lastBuildDate>Mon, 09 Oct 2017 17:15:56 +0530</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Python regex Simplified</title>
        <description>&lt;h2&gt;&lt;u&gt;Introduction&lt;/u&gt;&lt;/h2&gt;

&lt;h3&gt;Python regex metacharacters&lt;/h3&gt;
. ^ $ * + ? { } [ ] \ | ( )

&lt;p&gt;

1. [] - 

Negate - ^

Escape Character - \


The first metacharacters we’ll look at are [ and ]. They’re used for specifying a character class, which is a set of characters that you wish to match. Characters can be listed individually, or a range of characters can be indicated by giving two characters and separating them by a &#39;-&#39;. For example, [abc] will match any of the characters a, b, or c; this is the same as [a-c], which uses a range to express the same set of characters. If you wanted to match only lowercase letters, your RE would be [a-z].

Metacharacters are not active inside classes. For example, [akm$] will match any of the characters &#39;a&#39;, &#39;k&#39;, &#39;m&#39;, or &#39;$&#39;; &#39;$&#39; is usually a metacharacter, but inside a character class it’s stripped of its special nature.

You can match the characters not listed within the class by complementing the set. This is indicated by including a &#39;^&#39; as the first character of the class; &#39;^&#39; outside a character class will simply match the &#39;^&#39; character. For example, [^5] will match any character except &#39;5&#39;.

Perhaps the most important metacharacter is the backslash, \. As in Python string literals, the backslash can be followed by various characters to signal various special sequences. It’s also used to escape all the metacharacters so you can still match them in patterns; for example, if you need to match a [ or \, you can precede them with a backslash to remove their special meaning: \[ or \\.

Some of the special sequences beginning with &#39;\&#39; represent predefined sets of characters that are often useful, such as the set of digits, the set of letters, or the set of anything that isn’t whitespace.

Let’s take an example: \w matches any alphanumeric character. If the regex pattern is expressed in bytes, this is equivalent to the class [a-zA-Z0-9_]. If the regex pattern is a string, \w will match all the characters marked as letters in the Unicode database provided by the unicodedata module. You can use the more restricted definition of \w in a string pattern by supplying the re.ASCII flag when compiling the regular expression.

The following list of special sequences isn’t complete. For a complete list of sequences and expanded class definitions for Unicode string patterns, see the last part of Regular Expression Syntax in the Standard Library reference. In general, the Unicode versions match any character that’s in the appropriate category in the Unicode database.

\d
Matches any decimal digit; this is equivalent to the class [0-9].
\D
Matches any non-digit character; this is equivalent to the class [^0-9].
\s
Matches any whitespace character; this is equivalent to the class [ \t\n\r\f\v].
\S
Matches any non-whitespace character; this is equivalent to the class [^ \t\n\r\f\v].
\w
Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_].
\W
Matches any non-alphanumeric character; this is equivalent to the class [^a-zA-Z0-9_].
These sequences can be included inside a character class. For example, [\s,.] is a character class that will match any whitespace character, or &#39;,&#39; or &#39;.&#39;.

The final metacharacter in this section is .. It matches anything except a newline character, and there’s an alternate mode (re.DOTALL) where it will match even a newline. &#39;.&#39; is often used where you want to match “any character”.
&lt;/p&gt;</description>
        <pubDate>Thu, 13 Jul 2017 09:00:00 +0530</pubDate>
        <link>http://hellodk.in///python_regex_simplified</link>
        <guid isPermaLink="true">http://hellodk.in///python_regex_simplified</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Over Exposed Photos</title>
        <description>&lt;h2&gt;&lt;u&gt;Introduction&lt;/u&gt;&lt;/h2&gt;

&lt;h5&gt;Installing HA proxy&lt;/h5&gt;
&lt;h5&gt;Configuring HAProxy&lt;/h5&gt;
&lt;p&gt;
Configuration file format:
&lt;/p&gt;

There are 3 major parameters in HA Proxy&#39;s configuration:

1. Command Line Arguments, 
HAProxy&#39;s configuration process involves 3 major sources of parameters :

  - the arguments from the command-line, which always take precedence
  - the &quot;global&quot; section, which sets process-wide parameters
  - the proxies sections which can take form of &quot;defaults&quot;, &quot;listen&quot;,
    &quot;frontend&quot; and &quot;backend&quot;.

The configuration file syntax consists in lines beginning with a keyword
referenced in this manual, optionally followed by one or several parameters
delimited by spaces. If spaces have to be entered in strings, then they must be
preceded by a backslash (&#39;\&#39;) to be escaped. Backslashes also have to be
escaped by doubling them.
</description>
        <pubDate>Wed, 12 Jul 2017 18:00:00 +0530</pubDate>
        <link>http://hellodk.in///overexposed_photos</link>
        <guid isPermaLink="true">http://hellodk.in///overexposed_photos</guid>
        
        <category>photography</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Mac Shortcuts</title>
        <description>&lt;h3&gt;Keyboard Tips&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The Delete key works like Backspace if you are from other platforms. To delete on the other direction, press Fn + Delete&lt;/li&gt;
&lt;li&gt;The Backspace will feel slow by default. This can be changed in Keyboard Preferences by making &quot;Key Repeat&quot; fast &amp; &quot;Delay Until Repeat&quot; short. Ref: http://forums.macrumors.com/showthread.php?t=508385 &lt;/li&gt;
&lt;li&gt;If you are missing Home &amp; End keys, it is Command+ Left Arrow &amp; Command + Right Arrow&lt;/li&gt;
&lt;li&gt;If you are missing Page Up &amp; Down keys, it is Command+ Up Arrow &amp; Command + Down Arrow&lt;/li&gt;
 
&lt;h3&gt;Mouse/Trackpad Tips:&lt;/h3&gt;
To Drag something, Select Text, you can press the mouse button and drag it. If you are familiar with Double Tap &amp; Drag like in Windows, Linux, You can have the same settings enabled in System Preferences &gt; Universal Access &gt; Mouse &amp; Trackpad &gt;Trackpad Options -&gt; Enable Dragging Without Lock. Ref: http://chris.dziemborowicz.com/blog/2012/07/04/enable-double-tap-to-drag-in-mac-os-x-lion/
 
Navigation:
Command+Down To Open a Folder/File or to launch an application from keyboard
Command + Up   To go one level up in finder
Ctrl + Up             To Bring Mission Control
Command + tilde  To Switch windows of same App
Command + h       To hide the window
/                          To enter/paste a path in Finder Window (Open, Save Dialog boxes)
 
Terminal:
Ctrl+a  To go to the beginning of line, Ctrl+e to go the end of line. The Link has more shortcuts: http://apple.stackexchange.com/questions/12997/can-home-and-end-keys-be-mapped-when-using-terminal
Tweaks:
Show Full Path in the title bar:
defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES
killall Finder
 Ref: http://osxdaily.com/2007/12/02/show-full-directory-path-in-finder-window-title-bars/
Copy Path of selected Folder/File:
Ref: http://osxdaily.com/2013/06/19/copy-file-folder-path-mac-os-x/</description>
        <pubDate>Wed, 05 Jul 2017 15:48:00 +0530</pubDate>
        <link>http://hellodk.in///mac_shortcuts</link>
        <guid isPermaLink="true">http://hellodk.in///mac_shortcuts</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Yum Commands - A quick jist</title>
        <description>&lt;ol&gt;
&lt;li&gt;&lt;h5&gt;To make a search of some package or term in the data base in some of the formed deposits yum in the system:&lt;/h5&gt;&lt;/li&gt;
&lt;/br&gt;
&lt;p&gt;Syntax: &lt;span style=&quot;font-family: courier new,courier;&quot;&gt;yum search any-package&lt;/span&gt;&lt;/p&gt;
Example: &lt;code&gt;yum search httpd&lt;/code&gt;
&lt;h5&gt;To consult the information contained in a package in individual:&lt;/h5&gt;
&lt;/br&gt;yum info any-package
&lt;/br&gt;Example: yum info httpd
&lt;/br&gt;&lt;/br&gt;Uninstalling packages. Desinstalación of packages along with everything what it depends on these:
&lt;/br&gt;yum remove any-package
&lt;/br&gt;Example: yum remove gkrellm
&lt;/br&gt;The following thing will list all the packages available in the data base yum and that can settle:
&lt;/br&gt;available yum list|less
&lt;/br&gt;The following thing will list all the packages installed in the system:
&lt;/br&gt;yum list installed|less
&lt;/br&gt;The following thing will list all the packages installed in the system and that can (they must) be updated:
&lt;/br&gt;yum list updates|less
&lt;/br&gt;Cleaning of the system.
&lt;/br&gt;
&lt;p&gt;&lt;span style=&quot;font-family: courier new,courier;&quot;&gt;Yum leaves as result of its use heads and packages RPM stored in the interior of the directory located in the route /var/cache/yum/. Particularly the packages RPM that have settled can occupy much space and is by such reason agrees to eliminate them once no longer they have utility. Also it agrees to do the same with the old heads of packages that no longer are in the data base. In order to make the &lt;/br&gt;corresponding cleaning, the following thing can be executed:&lt;/span&gt;&lt;/p&gt;s
&lt;/br&gt;
&lt;/br&gt;&lt;code&gt;yum clean all&lt;/code&gt;
&lt;/br&gt;Group install:
&lt;/br&gt;&lt;code&gt;yum groupinstall &quot;groupname&quot;&lt;/code&gt;
&lt;/ol&gt;</description>
        <pubDate>Sat, 10 Jun 2017 17:50:00 +0530</pubDate>
        <link>http://hellodk.in///yum_commands_quick_reference</link>
        <guid isPermaLink="true">http://hellodk.in///yum_commands_quick_reference</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Configure multiple SSH identities for GitBash, Mac OSX, &amp; Linux</title>
        <description>&lt;p&gt;
&lt;/p&gt;</description>
        <pubDate>Wed, 26 Apr 2017 18:48:00 +0530</pubDate>
        <link>http://hellodk.in///configure_multiple_ssh_identities_for_gitbash_mac_linux</link>
        <guid isPermaLink="true">http://hellodk.in///configure_multiple_ssh_identities_for_gitbash_mac_linux</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>RabbitMQ - Detecting Dead TCP Connections with Heartbeats</title>
        <description>&lt;p&gt;
In some types of network failure, packet loss can mean that disrupted TCP connections take a moderately long time (about 11 minutes with default configuration on Linux, for example) to be detected by the operating system. AMQP 0-9-1 offers a heartbeat feature to ensure that the application layer promptly finds out about disrupted connections (and also completely unresponsive peers). Heartbeats also defend against certain network equipment which may terminate &quot;idle&quot; TCP connections. See Heartbeats for details.
&lt;/p&gt;

&lt;h4&gt;&lt;u&gt;At the Broker&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
In order to avoid losing messages in the broker we need to cope with broker restarts, broker hardware failure and in extremis even broker crashes.
&lt;/p&gt;
&lt;p&gt;
To ensure that messages and broker definitions survive restarts, we need to ensure that they are on disk. The AMQP standard has a concept of durability for exchanges, queues and of persistent messages, requiring that a durable object or persistent message will survive a restart. More details about specific flags pertaining to durability and persistence can be found in the AMQP Concepts Guide.
&lt;/p&gt;
&lt;h4&gt;&lt;u&gt;Clustering and High Availability&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
If we need to ensure that our broker survives hardware failure, we can use RabbitMQ&#39;s clustering. In a RabbitMQ cluster, all definitions (of exchanges, bindings, users, etc) are mirrored across the entire cluster. Queues behave differently, by default residing only on a single node, but optionally being mirrored across several or all nodes. Queues remain visible and reachable from all nodes regardless of where they are located.
&lt;/p&gt;
&lt;p&gt;
Mirrored queues replicate their contents across all configured cluster nodes, tolerating node failures seamlessly and without message loss (although see this note on unsynchronised slaves). However, consuming applications need to be aware that when queues fail their consumers will be cancelled and they will need to reconsume - see the documentation for more details.
&lt;/p&gt;
At the Producer
&lt;p&gt;
When using confirms, producers recovering from a channel or connection failure should retransmit any messages for which an acknowledgement has not been received from the broker. There is a possibility of message duplication here, because the broker might have sent a confirmation that never reached the producer (due to network failures, etc). Therefore consumer applications will need to perform deduplication or handle incoming messages in an idempotent manner.
&lt;/p&gt;
&lt;h4&gt;&lt;u&gt;Ensuring Messages are Routed&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
In some circumstances it can be important for producers to ensure that their messages are being routed to queues (although not always - in the case of a pub-sub system producers will just publish and if no consumers are interested it is correct for messages to be dropped).
&lt;/p&gt;
&lt;p&gt;
To ensure messages are routed to a single known queue, the producer can just declare a destination queue and publish directly to it. If messages may be routed in more complex ways but the producer still needs to know if they reached at least one queue, it can set the mandatory flag on a basic.publish, ensuring that a basic.return (containing a reply code and some textual explanation) will be sent back to the client if no queues were appropriately bound.
&lt;/p&gt;
&lt;p&gt;
Producers should also be aware that when publishing to a clustered node, if one or more destination queues that are bound to the exchange have mirrors in the cluster, it&#39;s possible to incur delays in the face of network failures between nodes, due to flow control between replicas and the master queue process. See here for more details.
&lt;/p&gt;
&lt;h4&gt;&lt;u&gt;At the Consumer&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
In the event of network failure (or a node crashing), messages can be duplicated, and consumers must be prepared to handle them. If possible, the simplest way to handle this is to ensure that your consumers handle messages in an idempotent way rather than explicitly deal with deduplication.
&lt;/p&gt;
&lt;p&gt;
If a message is delivered to a consumer and then requeued (because it was not acknowledged before the consumer connection dropped, for example) then RabbitMQ will set the redelivered flag on it when it is delivered again (whether to the same consumer or a different one). This is a hint that a consumer may have seen this message before (although that&#39;s not guaranteed, the message may have made it out of the broker but not into a consumer before the connection dropped). Conversely if the redelivered flag is not set then it is guaranteed that the message has not been seen before. Therefore if a consumer finds it more expensive to deduplicate messages or process them in an idempotent manner, it can do this only for messages with the redelivered flag set.
&lt;/p&gt;
&lt;h4&gt;&lt;u&gt;Consumer Cancel Notification&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
Under some circumstances the server needs to be able to cancel a consumer - since the queue it was consuming from has been deleted, or has failed over. In this case the consumer should consume again but be aware that it may see messages again which it has already seen.
&lt;/p&gt;
&lt;code&gt;Note that consumer cancel notification is a RabbitMQ extension to AMQP, and as such may not be supported by all clients.&lt;/code&gt;
&lt;/br&gt;&lt;/br&gt;
&lt;h4&gt;&lt;u&gt;Messages That Cannot Be Processed&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
If a consumer determines that it cannot handle a message then it can reject it using basic.reject (or basic.nack), either asking the server to requeue it, or not (in which case the server might be configured to dead-letter it instead.
&lt;/p&gt;
&lt;h4&gt;&lt;u&gt;Distributed RabbitMQ&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
Rabbit provides two plugins to assist with distributing nodes over unreliable networks: federation and the shovel. Both are implemented as AMQP clients, so if you configure them to use confirms and acknowledgements, they will retransmit when necessary. Both will use confirms and acknowledgements by default.
&lt;/p&gt;
&lt;p&gt;
When connecting clusters with federation or the shovel, it is desirable to ensure that the federation links and shovels tolerate node failures. Federation will automatically distribute links across the downstream cluster and fail them over on failure of a downstream node. In order to connect to a new upstream when an upstream node fails you can specify multiple redundant URIs for an upstream, or connect via a TCP load balancer.
&lt;/p&gt;
&lt;p&gt;
When using the shovel, it is possible to specify redundant brokers in a source or destination clause; however it is not currently possible to make the shovel itself redundant. We hope to improve this situation in the future; in the mean time a new node can be brought up manually to run a shovel if the node it was originally running on fails.
&lt;/p&gt;</description>
        <pubDate>Mon, 24 Apr 2017 17:48:00 +0530</pubDate>
        <link>http://hellodk.in///detecting-dead-tcp-connections</link>
        <guid isPermaLink="true">http://hellodk.in///detecting-dead-tcp-connections</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>HTTP Quick Reference - A Quick reminder about HTTP</title>
        <description>In this tutorial we will cover the basics of an HTTP request and see how it works.
&lt;/br&gt;
&lt;h2&gt;&lt;u&gt;HTTP Transaction Model:&lt;/u&gt;&lt;/h2&gt;
&lt;p&gt;The HTTP protocol is transaction-driven. This means that each request will lead
to one and only one response. Traditionally, a TCP connection is established
from the client to the server, a request is sent by the client on the
connection, the server responds and the connection is closed. A new request
will involve a new connection :&lt;/p&gt;

&lt;code&gt;  [CON1] [REQ1] ... [RESP1] [CLO1] [CON2] [REQ2] ... [RESP2] [CLO2] ... &lt;/code&gt;
&lt;/br&gt;&lt;/br&gt;

&lt;p&gt;In this mode, called the &quot;HTTP close&quot; mode, there are as many connection
establishments as there are HTTP transactions. Since the connection is closed
by the server after the response, the client does not need to know the content
length.&lt;/p&gt;

&lt;p&gt;Due to the transactional nature of the protocol, it was possible to improve it
to avoid closing a connection between two subsequent transactions. In this mode
however, it is mandatory that the server indicates the content length for each
response so that the client does not wait indefinitely. For this, a special
header is used: &quot;Content-length&quot;. This mode is called the &quot;keep-alive&quot; mode :&lt;/p&gt;

  &lt;code&gt;[CON] [REQ1] ... [RESP1] [REQ2] ... [RESP2] [CLO] ...&lt;/code&gt;
&lt;/br&gt;&lt;/br&gt;
&lt;p&gt;Its advantages are a reduced latency between transactions, and less processing
power required on the server side. It is generally better than the close mode,
but not always because the clients often limit their concurrent connections to
a smaller value.&lt;/p&gt;

&lt;p&gt;A last improvement in the communications is the pipelining mode. It still uses
keep-alive, but the client does not wait for the first response to send the
second request. This is useful for fetching large number of images composing a
page :&lt;/p&gt;

&lt;code&gt;  [CON] [REQ1] [REQ2] ... [RESP1] [RESP2] [CLO] ...&lt;/code&gt;
&lt;/br&gt;&lt;/br&gt;

&lt;p&gt;This can obviously have a tremendous benefit on performance because the network
latency is eliminated between subsequent requests. Many HTTP agents do not
correctly support pipelining since there is no way to associate a response with
the corresponding request in HTTP. For this reason, it is mandatory for the
server to reply in the exact same order as the requests were received.&lt;/p&gt;

  &lt;h2&gt;&lt;u&gt;HTTP Request&lt;/u&gt;&lt;/h2&gt;
  &lt;p&gt;First, let&#39;s consider this HTTP request :&lt;/p&gt;
  
  &lt;table id=&quot;t01&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Line Number&lt;/th&gt;
    &lt;th&gt;Contents&lt;/th&gt; 
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;GET /serv/login.php?lang=en&amp;profile=2 HTTP/1.1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;Host: www.mydomain.com&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;User-agent: my small browser&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;4&lt;/td&gt;
    &lt;td&gt;Accept: image/jpeg, image/gif&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;5&lt;/td&gt;
    &lt;td&gt;Accept: image/png&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3&gt;&lt;u&gt;The Request line&lt;/u&gt;&lt;/h3&gt;

&lt;p&gt;Line 1 is the &quot;request line&quot;. It is always composed of 3 fields :&lt;/p&gt;
&lt;li&gt;METHOD      : GET&lt;/li&gt;
&lt;li&gt;URI         : /serv/login.php?lang=en&amp;profile=2&lt;/li&gt;
&lt;li&gt;Version tag : HTTP/1.1&lt;/li&gt;
&lt;/br/&gt;
&lt;p&gt;
All of them are delimited by what the standard calls LWS (linear white spaces),
which are commonly spaces, but can also be tabs or line feeds/carriage returns
followed by spaces/tabs. The method itself cannot contain any colon (&#39;:&#39;) and
is limited to alphabetic letters.
&lt;/p&gt;

The URI itself can have several forms :
&lt;/br&gt;
&lt;li&gt;A &quot;relative URI&quot; : (&lt;code&gt;/serv/login.php?lang=en&amp;profile=2&lt;/code&gt;)
    It is a complete URL without the host part. This is generally what is received by servers, reverse proxies and transparent proxies.
&lt;/li&gt;
&lt;li&gt;An &quot;absolute URI&quot;, also called a &quot;URL&quot; : (&lt;code&gt;http://192.168.0.12:8080/serv/login.php?lang=en&amp;profile=2&lt;/code&gt;)
    It is composed of a &quot;scheme&quot; (the protocol name followed by &#39;://&#39;), a host
    name or address, optionally a colon (&#39;:&#39;) followed by a port number, then
    a relative URI beginning at the first slash (&#39;/&#39;) after the address part.
    This is generally what proxies receive, but a server supporting HTTP/1.1
    must accept this form too.
&lt;/li&gt;
&lt;li&gt;A &quot;star&quot; : &lt;code&gt;(&#39;*&#39;)&lt;/code&gt; This form is only accepted in association with the OPTIONS
    method and is not relayable. It is used to inquiry a next hop&#39;s capabilities.
&lt;/li&gt;
&lt;li&gt;An address:port combination : (&lt;code&gt;192.168.0.12:80&lt;/code&gt;)
    This is used with the CONNECT method, which is used to establish TCP
    tunnels through HTTP proxies, generally for HTTPS, but sometimes for
    other protocols too.
&lt;/li&gt;
&lt;/code&gt;
&lt;/br&gt;
&lt;p&gt;
In a relative URI, two sub-parts are identified. The part before the question
mark is called the &quot;path&quot;. It is typically the relative path to static objects
on the server. The part after the question mark is called the &quot;query string&quot;.
It is mostly used with GET requests sent to dynamic scripts and is very
specific to the language, framework or application in use.
&lt;/p&gt;
&lt;/br&gt;
&lt;h2&gt;&lt;u&gt;The request headers&lt;/u&gt;&lt;/h2&gt;
&lt;p&gt;
The headers start at the second line and are composed of a name at the
beginning of the line, immediately followed by a colon &lt;code&gt;(&#39;:&#39;)&lt;/code&gt;. Traditionally,
an LWS is added after the colon but that&#39;s not required. Then come the values.
Multiple identical headers may be folded into one single line, delimiting the
values with commas, provided that their order is respected. This is commonly
encountered in the &quot;Cookie:&quot; field. A header may span over multiple lines if
the subsequent lines begin with an LWS. In the example in 1.2, lines 4 and 5
define a total of 3 values for the &quot;Accept:&quot; header.
&lt;/p&gt;

&lt;p&gt;
Contrary to a common mis-conception, header names are not case-sensitive, and
their values are not either if they refer to other header names (such as the
&quot;Connection:&quot; header).
&lt;/p&gt;
&lt;p&gt;
The end of the headers is indicated by the first empty line. People often say
that it&#39;s a double line feed, which is not exact, even if a double line feed
is one valid form of empty line.
&lt;/p&gt;

&lt;h2&gt;&lt;u&gt;HTTP response&lt;/u&gt;&lt;/h2&gt;
&lt;p&gt;An HTTP response looks very much like an HTTP request. Both are called HTTP
messages. Let&#39;s consider this HTTP response :

&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Line&lt;/th&gt;
&lt;th&gt;Contents&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;HTTP/1.1 200 OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Content-length: 350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Content-Type: text/html&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;   
&lt;/p&gt;

&lt;p&gt;
As a special case, HTTP supports so called &quot;Informational responses&quot; as status
codes 1xx. These messages are special in that they don&#39;t convey any part of the
response, they&#39;re just used as sort of a signaling message to ask a client to
continue to post its request for instance.
&lt;/p&gt;
&lt;p&gt;
In the case of a status 100 response
the requested information will be carried by the next non-100 response message
following the informational one. This implies that multiple responses may be
sent to a single request, and that this only works when keep-alive is enabled
(1xx messages are HTTP/1.1 only).
&lt;/p&gt;

&lt;h2&gt;&lt;u&gt;The Response line&lt;/u&gt;&lt;/h2&gt;
&lt;p&gt;Line 1 is the &quot;response line&quot;. It is always composed of 3 fields :

&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Value(can be different at times)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Version tag&lt;/td&gt;
&lt;td&gt;HTTP/1.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Status code&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reason&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;/p&gt;
The status code is always 3-digit. The first digit indicates a general status :
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Message&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;1xx&lt;/td&gt;
 &lt;td&gt;informational message to be skipped (eg: 100, 101)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;2xx&lt;/td&gt;
 &lt;td&gt;OK, content is following   (eg: 200, 206)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;3xx&lt;/td&gt;
 &lt;td&gt;OK, no content following   (eg: 302, 304)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;4xx&lt;/td&gt;
 &lt;td&gt;error caused by the client (eg: 401, 403, 404)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
 &lt;td&gt;5xx&lt;/td&gt;
 &lt;td&gt;error caused by the server (eg: 500, 502, 503)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

You can also refer to RFC2616 for the detailed meaning of all such codes. The
&quot;reason&quot; field is just a hint, but is not parsed by clients. Anything can be
found there, but it&#39;s a common practice to respect the well-established
messages. It can be composed of one or multiple words, such as &quot;OK&quot;, &quot;Found&quot;,
or &quot;Authentication Required&quot;.

Below is the table depicting the basic interpretation of HTTP status codes:

&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;Code&lt;/th&gt;
  &lt;th&gt;When / reason&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;200&lt;/td&gt;
   &lt;td&gt;access to stats page, and when replying to monitoring requests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;301&lt;/td&gt;
   &lt;td&gt;when performing a redirection, depending on the configured code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;302&lt;/td&gt;
   &lt;td&gt;when performing a redirection, depending on the configured code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;303&lt;/td&gt;
   &lt;td&gt;when performing a redirection, depending on the configured code&lt;/td&gt;
   &lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;307&lt;/td&gt;
   &lt;td&gt;when performing a redirection, depending on the configured code&lt;/td&gt;
   &lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;308&lt;/td&gt;
   &lt;td&gt;when performing a redirection, depending on the configured code&lt;/td&gt;
   &lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;400&lt;/td&gt;
   &lt;td&gt;for an invalid or too large request&lt;/td&gt;
   &lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;401&lt;/td&gt;
   &lt;td&gt;when an authentication is required to perform the action (when accessing the stats page)&lt;/td&gt;
   &lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;403&lt;/td&gt;
   &lt;td&gt;when a request is forbidden by a &quot;block&quot; ACL or &quot;reqdeny&quot; filter&lt;/td&gt;
   &lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;408&lt;/td&gt;
   &lt;td&gt;when the request timeout strikes before the request is complete&lt;/td&gt;
   &lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;500&lt;/td&gt;
   &lt;td&gt;when haproxy encounters an unrecoverable internal error, such as a memory allocation failure, which should never happen&lt;/td&gt;
   &lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;502&lt;/td&gt;
   &lt;td&gt;when the server returns an empty, invalid or incomplete response, or when an &quot;rspdeny&quot; filter blocks the response.&lt;/td&gt;
   &lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;503&lt;/td&gt;
   &lt;td&gt;when no server was available to handle the request, or in response to monitoring requests which match the &quot;monitor fail&quot; condition&lt;/td&gt;
   &lt;/tr&gt;
&lt;tr&gt;
   &lt;td&gt;504&lt;/td&gt;
   &lt;td&gt;when the response timeout strikes before the server responds&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;
&lt;/br&gt;

&lt;h2&gt;&lt;u&gt;The response headers&lt;/u&gt;&lt;/h2&gt;
&lt;p&gt;Response headers work exactly like request headers.&lt;/p&gt;</description>
        <pubDate>Thu, 20 Apr 2017 18:00:00 +0530</pubDate>
        <link>http://hellodk.in///http_quick_reference</link>
        <guid isPermaLink="true">http://hellodk.in///http_quick_reference</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>HA Proxy for Beginners</title>
        <description>&lt;h2&gt;&lt;u&gt;Introduction&lt;/u&gt;&lt;/h2&gt;

&lt;h5&gt;Installing HA proxy&lt;/h5&gt;
&lt;h5&gt;Configuring HAProxy&lt;/h5&gt;
&lt;p&gt;
Configuration file format:
&lt;/p&gt;

There are 3 major parameters in HA Proxy&#39;s configuration:

1. Command Line Arguments, 
HAProxy&#39;s configuration process involves 3 major sources of parameters :

  - the arguments from the command-line, which always take precedence
  - the &quot;global&quot; section, which sets process-wide parameters
  - the proxies sections which can take form of &quot;defaults&quot;, &quot;listen&quot;,
    &quot;frontend&quot; and &quot;backend&quot;.

The configuration file syntax consists in lines beginning with a keyword
referenced in this manual, optionally followed by one or several parameters
delimited by spaces. If spaces have to be entered in strings, then they must be
preceded by a backslash (&#39;\&#39;) to be escaped. Backslashes also have to be
escaped by doubling them.
</description>
        <pubDate>Thu, 20 Apr 2017 18:00:00 +0530</pubDate>
        <link>http://hellodk.in///ha_proxy_for_beginners</link>
        <guid isPermaLink="true">http://hellodk.in///ha_proxy_for_beginners</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>lune de miel à andaman</title>
        <description>While looking for a light yet powerful Configuration Management tool, I was going through some of the various available tools, and came across Ansible. After having a quick look at the features, something which caught my attention: &quot;Ansible is agent-less&quot;, hence I decided to give it a try. Having used Ansible for some around more than 8+ months configuration management, I personally feel...Ansible is awesome!!
So what is Ansible? Well, it is a configuration management tool, and it empowers you to configure/orchestrate multiple systems at great ease, saving a lot of downtime and resources.
So how does it does that? The answer lies with ssh keys based agent forwarding. Ansible uses ssh for logging to the remote system, and can execute package installation, shell commands, install/update package management systems, clone git and anything under the sun you need for configuration management.
So why don&#39;t you try your hands on Ansible and experience it&#39;s awesomeness....all you need to do is to install it on your host system.

Ansible does not have it&#39;s own process, and unlike other configuration tolls available, it is agent-less!!

Ansible ships in 2 forms:
1. Core Ansible
2. Ansible Tower

Installation:
1. OS package manager:
sudo apt-get install software-properties-common
sudo apt-add-repository ppa:ansible/ansiblesudo apt-get update
sudo apt-get install ansible
2. Via python pip:
sudo pip install ansible

Ansible uses a configuration file, called host files for doing ssh to the remote machines. By default it is located in /etc/ansible/hosts
All you need to do is to add the host ip and the ssh_username to the file, and the public key of your host to the remote machine and you are all set to go!!

Commands:
ansible all -i ansible_hosts -m ping
ansible all -m ping -u deepak
ansible -m shell -a &#39;free -m&#39; host1
ansible all -m shell -a &#39;free -m&#39; -u dk

Playbooks are Ansible’s configuration, deployment, and orchestration language. They can describe a policy you want your remote systems to enforce, or a set of steps in a general IT process.

Playbooks are written in YAML language, and comprises of Plays

Running a Playbook in Ansible:
ansible-playbook playbook.yml -f 10</description>
        <pubDate>Wed, 01 Mar 2017 09:48:00 +0530</pubDate>
        <link>http://hellodk.in///travel_diaries</link>
        <guid isPermaLink="true">http://hellodk.in///travel_diaries</guid>
        
        <category>travel</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>RethinkDb Installation on Ubuntu-14.04</title>
        <description>Let&#39;s get some hands on rethinkdb today and find it out yourself. &lt;/br&gt;
&lt;/br&gt;
So what is rethinkdb?
&lt;/br&gt;&lt;/br&gt;
Rethinkdb is an open-source, scalable JSON database built from the ground up for the realtime web.
&lt;/br&gt;RethinkDB inverts the traditional database architecture by exposing an exciting new access model – instead of polling for changes, the developer can tell RethinkDB to continuously push updated query results to applications in realtime. RethinkDB’s realtime push architecture dramatically reduces the time and effort necessary to build scalable realtime apps. RethinkDB also offers a flexible query language, intuitive operations and monitoring APIs, and is easy to setup and learn. Just like any other database solution, rethinkdb ships as a client-server component model. The installation process for both the server and the client are illustrated below:

&lt;p&gt;How to Install RethinkDb:&lt;/p&gt;
1. Add the RethinkDB PPA to your list of repositories : 
&lt;br&gt;&lt;/br&gt;
&lt;code&gt;source /etc/lsb-release &amp;&amp; echo &quot;deb http://download.rethinkdb.com/apt $DISTRIB_CODENAME main&quot; | sudo tee /etc/apt/sources.list.d/rethinkdb.list&lt;/code&gt;
&lt;br&gt;&lt;/br&gt;
2. Add the keys:&lt;br&gt;&lt;/br&gt;

&lt;code&gt;wget -qO- http://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -&lt;/code&gt;
&lt;br&gt;&lt;/br&gt;
3. Update the repository:
&lt;br&gt;&lt;/br&gt;
&lt;code&gt;sudo apt-get update&lt;/code&gt;
&lt;br&gt;&lt;/br&gt;
4. Install the rethinkdb server via apt-get:
&lt;br&gt;&lt;/br&gt;
&lt;code&gt;sudo apt-get -y install rethinkdb&lt;/code&gt;
&lt;br&gt;&lt;/br&gt;
Install rethinkdb client:
&lt;br&gt;&lt;/br&gt;
1. Install the python-pip package:
&lt;br&gt;&lt;/br&gt;
&lt;code&gt;sudo apt-get install python-pip&lt;/code&gt;
&lt;br&gt;&lt;/br&gt;
2. Install the rethinkdb python client:
&lt;br&gt;&lt;/br&gt;
&lt;code&gt;sudo pip install rethinkdb&lt;/code&gt;
&lt;br&gt;&lt;/br&gt;
The above steps ensure that rethinkdb is installed on the system, while it does not ensures that this will start the rethinkdb service on system startup. You still need to start the rethinkdb service using the below command
&lt;br&gt;&lt;/br&gt;
&lt;code&gt;rethinkdb&lt;/code&gt;
&lt;br&gt;&lt;/br&gt;
The above command will ensure that rethinkdb is running as a terminal process, and will exit once the terminal is closed, or the process is killed, in short it will not run rethinkdb as a background service.
&lt;br&gt;&lt;/br&gt;
To start rethinkdb as a service, please follow the below steps:
&lt;br&gt;&lt;/br&gt;
1.  Move to the directory /etc/rethinkdb
&lt;br&gt;&lt;/br&gt;&lt;code&gt;cd /etc/rethinkdb&lt;/code&gt;
&lt;br&gt;&lt;/br&gt;
2. Copy the file to /etc/rethinkdb/instances.d and rename the file as per your requirements ensuring the extension is .conf only. Say for example the file name is rethinkdb1.conf
&lt;br&gt;&lt;/br&gt;&lt;code&gt;cp default.conf.sample rethinkdb1.conf&lt;/code&gt;
&lt;br&gt;&lt;/br&gt;
3. Now open the file /etc/rethinkdb/instances.d/rethinkdb1.conf and modify the paramaters as per your requirements.
&lt;br&gt;&lt;/br&gt;&lt;code&gt;vim rethinkdb1.conf&lt;/code&gt;
&lt;br&gt;&lt;/br&gt;
4. If setting up a cluster, we suggest do change the server-name to somethink like &#39;rethinkdb-primary&#39; or &#39;rethinkdb-1&#39; or &#39;master&#39; or &#39;slave&#39;. This will ensure that we have a meaningful naming convention for our cluster.
&lt;br&gt;&lt;/br&gt;
5. The default port details are :
&lt;br&gt;&lt;/br&gt;
&lt;code&gt;29015 :&lt;/code&gt; Rethinkdb listens for intracluster connections
&lt;/br&gt;
&lt;code&gt;28015 :&lt;/code&gt; Rethinkdb listens for client driver connections
&lt;/br&gt;
&lt;code&gt;8080  :&lt;/code&gt; Rethinkdb listens for administrative HTTP connections
&lt;/br&gt;
&lt;code&gt;22    :&lt;/code&gt; For SSH. The server uses public key authentication.
&lt;/br&gt;
&lt;code&gt;80    :&lt;/code&gt; For HTTP. It is used during the setup process but otherwise redirects to HTTPS.
&lt;/br&gt;
&lt;code&gt;443   :&lt;/code&gt; For HTTPS. An Nginx server sits between RethinkDB and the world and provides basic HTTP authentication and secure HTTPS connections for the web UI
&lt;br&gt;&lt;/br&gt;
&lt;/body&gt;
&lt;/html&gt;</description>
        <pubDate>Wed, 21 Sep 2016 15:48:00 +0530</pubDate>
        <link>http://hellodk.in///rethinkdb_installation_ubuntu14</link>
        <guid isPermaLink="true">http://hellodk.in///rethinkdb_installation_ubuntu14</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
  </channel>
</rss>
