<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>A beautiful narrative written an elegant publishing platform. The story begins here.</description>
    <link>http://hellodk.github.io///</link>
    <atom:link href="http://hellodk.github.io///feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 05 Feb 2016 15:27:14 +0530</pubDate>
    <lastBuildDate>Fri, 05 Feb 2016 15:27:14 +0530</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>The UNIX Time-Sharing System</title>
        <description>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;                          Drafted By

                        D. M. Ritchie
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Introduction
UNIX is a general-purpose, multi-user time sharing system implemented on several Digital Equipment Corporation PDP series machines.&lt;/p&gt;

&lt;p&gt;UNIX was written by K. L. Thompson, who also wrote many of the command programs. The author of this memorandum contributed several of the major commands, including the assembler and the debugger. The file system was originally designed by Thompson, the author, and R. H. Canaday.&lt;/p&gt;

&lt;p&gt;There are two versions of UNIX. The first, which has been in existence about a year, runs on the PDP-7 and -9 computers; a more modern version, a few months old, uses the PDP-11. This document describes UNIX-11, since it is more modern and many of the differences between it and UNIX-7 result from redesign of features found to be deficient or lacking in the earlier system. Although the PDP-7 and PDP-11 are both small computers, the design of UNIX is amenable to expansion for use on more powerful machines. Indeed, UNIX contains a number of features very seldom offered even by larger systems, including&lt;/p&gt;

&lt;p&gt;A versatile, convenient file system with complete integration between disk files and I/O devices;&lt;/p&gt;

&lt;p&gt;The ability to initiate asynchrously running processes.&lt;/p&gt;

&lt;p&gt;It must be said, however, that the most important features of UNIX are its simplicity, elegance, and ease of use.&lt;/p&gt;

&lt;p&gt;Besides the system proper, the major programs available under UNIX are an assembler, a text editor based on QED, a symbolic debugger for examining and patching faulty programs, and &amp;quot;B&amp;quot;, a higher level language resembling BCPL. UNIX-7 also has a version of the compiler writing language TMGL contributed by M. D. McIlroy, and besides its own assembler, there is a PDP-11 assembler which was used to write UNIX-11. On the PDP-11 there is a version of BASIC [reference] adapted from the one supplied by DEC [reference]. All but the last of these programs were written locally, and except for the very first versions of the editor and assembler, using UNIX itself.&lt;/p&gt;

&lt;p&gt;Hardware
The PDP-11 on which UNIX is implemented is a 16-bit 12K computer, and UNIX occupies 8K words. More than half of this space, however, is utilized for a variable number of disk buffers; with some loss of speed the number of buffers could be cut significantly.&lt;/p&gt;

&lt;p&gt;The PDP-11 has a 256K word disk, almost all of which is used for file system storage. It is equipped with DECTAPE, a variety of magnetic tape facility in which individual records may be addressed and rewritten at will. Also available are a high-speed paper tape reader and punch. Besides the standard Teletype, there are several variable-speed communications interfaces.&lt;/p&gt;

&lt;p&gt;The File System
The most important role of UNIX is to provide a file system. From the point of view of the user, there are three kinds of files: ordinary disk files, directories, and special files.&lt;/p&gt;

&lt;p&gt;3.1 Ordinary Files&lt;/p&gt;

&lt;p&gt;A file contains whatever information the user places there, for example symbolic or binary (object) programs. No particular structuring is expected by the system. Files of text ordinarily consist simply of a string of characters, with lines demarcated by the new-line character. Binary programs are sequences of words as they will appear in core memory when the program starts executing. A few user programs generate and expect files with more structure; for example, the assembler generates, and the debugger expects, a name list file in a particular format; however, the structure of files is controlled solely by the programs which use them, not by the system.&lt;/p&gt;

&lt;p&gt;3.2 Directories&lt;/p&gt;

&lt;p&gt;Directories (sometimes, &amp;quot;catalogs&amp;quot;), provide the mapping between the names of files and the files themselves, and thus induce a structure on the file system as a whole. Each user has a directory of his own files; he may also create subdirectories to contain groups of files conveniently treated together.&lt;/p&gt;

&lt;p&gt;A directory is exactly like an ordinary file except that it cannot be written on by user programs, so that the system controls the contents of directories. However, anyone with appropriate permission may read a directory just like any other file.&lt;/p&gt;

&lt;p&gt;The system maintains several directories for its own use. One of these is the root directory. All files in the system can be found by tracing a path through a chain of directories until the desired file is reached. The starting point for such searches is often the root, which contains an entry for each user&amp;#39;s master directory. Another system directory contains all the programs provided as part of the system; that is, all the commands (elsewhere, &amp;quot;subsystems&amp;quot;). As will be seen, however, it is by no means necessary that a program reside in this directory for it to be used as a command.&lt;/p&gt;

&lt;p&gt;Files and directories are named by sequences of eight or fewer characters. When the name of a file is specified to the system, it may be in the form of a path name, which is a sequence of directory names separated by slashes and ending in a file name. If the sequence begins with a slash, the search begins in the root directory. The name &amp;quot;/a/b/c&amp;quot; causes the system to search the root for directory &amp;quot;a&amp;quot;; then to search &amp;quot;a&amp;quot; for &amp;quot;b&amp;quot;, and then to find &amp;quot;c&amp;quot; in &amp;quot;b&amp;quot;. &amp;quot;c&amp;quot; may be an ordinary file, a directory, or a special file. As a limiting case, the name &amp;quot;/&amp;quot; refers to the root itself.&lt;/p&gt;

&lt;p&gt;The same non-directory file may appear in several directories under possibly different names. This feature is called &amp;quot;linking&amp;quot;; a directory entry for a file is sometimes called a link. UNIX differs from other systems in which linking is permitted in that all links to a file have equal status. That is, a file does not exist within a particular directory; the directory entry for a file consists merely of its name and a pointer to the information actually describing the file. Thus a file exists independently of any directory entry, although in practice a file is made to disappear along with the last link to it.&lt;/p&gt;

&lt;p&gt;When a user logs into UNIX, he is assigned a default current directory, but he may change to any directory readable by him. A path name not starting with &amp;quot;/&amp;quot; causes the system to begin the search in the userâ€™s current directory. Thus, the name &amp;quot;a/b&amp;quot; specifies the file named &amp;quot;b&amp;quot; in directory &amp;quot;a&amp;quot;, which is found in the current working directory. The simplest kind of name, for example &amp;quot;a&amp;quot;, refers to a file which itself is found in the working directory.&lt;/p&gt;

&lt;p&gt;Each directory always has at least two entries. The name &amp;quot;.&amp;quot; in each directory refers to the directory itself. Thus a program may read the current directory under the name &amp;quot;.&amp;quot; without knowing its actual path name. The name &amp;quot;..&amp;quot; by convention refers to the parent of the directory in which it appears; that is, the directory in which it was first created.&lt;/p&gt;

&lt;p&gt;The directory structure is constrained to have the form of a rooted tree. Except for the special entries &amp;quot;.&amp;quot; and &amp;quot;..&amp;quot;, each directory must appear as an entry in exactly one other, which is its parent. The reason for this is to simplify the writing of programs which visit subtrees of the directory structure, and more important, to avoid the separation of portions of the hierarchy. If arbitrary links to directories were permitted, it would be quite difficult to detect when the last connection from the root to a directory was severed.&lt;/p&gt;

&lt;p&gt;3.3 Special Files&lt;/p&gt;

&lt;p&gt;Special files constitute the most unusual feature of the UNIX file system. Each I/O device supported by UNIX is associated with at least one special file. Special files are read and written just like ordinary disk files, but the result is activation of the associated device. Entries for all special files reside in the root directory, so they may all be referred to by &amp;quot;/&amp;quot; followed by the appropriate name.&lt;/p&gt;

&lt;p&gt;The special files are discussed further in section 6 below.&lt;/p&gt;

&lt;p&gt;3.4 Protection&lt;/p&gt;

&lt;p&gt;The protection scheme in UNIX is quite simple. Each user of the system is assigned a unique user number. When a file-is created, it is marked with the number of its creator. Also given for new files is a set of protection bits. Four of these specify independently permission to read or write for the owner of the file and for all other users. A fifth bit indicates permission to execute the file as a program. If the sixth bit is on, the system will temporarily change the user identification of the current user to that of the creator of the file whenever the file is executed as a program. This feature provides for privileged programs which may use files which should neither be read nor changed by other users. If the set-user-identification bit is on for a program, the accounting file may be accessed during the programâ€™s execution but not otherwise.&lt;/p&gt;

&lt;p&gt;3.5 System I/O Calls&lt;/p&gt;

&lt;p&gt;The system calls to do I/O are designed to eliminate the differences between the various devices and styles of access. There is no distinction between &amp;quot;random&amp;quot; and sequential I/O, nor is any logical or physical record size imposed by the system. The size of a file on the disk is determined by the location of the last piece of information written on it; no predetermination of the size of a file is necessary. In UNIX-11, the unit of information is the 8-bit byte, since the PDP-11 is a byte-oriented machine.&lt;/p&gt;

&lt;p&gt;To illustrate the essentials of I/O in UNIX, the basic calls are summarized below in an anonymous higher level language which will indicate the needed parameters without getting into the complexities of machine language programming. (All system calls are also described in Appendix 1 in their actual form.) Each call to the system may potentially result in an error return, which for simplicity is not represented in the calling sequence.&lt;/p&gt;

&lt;p&gt;3.5.1 Open&lt;/p&gt;

&lt;p&gt;To read or write a file assumed to exist already, it must be Opened by the following call:&lt;/p&gt;

&lt;p&gt;filep = open(name, flag)
Name indicates the name of the file. An arbitrary path name may be given. The flag argument indicates whether the file is to be read or written. If the file is to be &amp;quot;updated&amp;quot;, that is read and written simultaneously, it may be opened twice, once for reading and once for writing.&lt;/p&gt;

&lt;p&gt;The returned argument filep is called a file descriptor. It is used to identify the file in subsequent calls to read, write or otherwise manipulate the file.&lt;/p&gt;

&lt;p&gt;There are no locks in the file system, nor is there any restriction on the number of users who may have a file open for reading or writing. Although one may imagine situations in which this fact is unfortunate, in practice difficulties are quite rare.&lt;/p&gt;

&lt;p&gt;3.5.2 Create&lt;/p&gt;

&lt;p&gt;To create a new file, the following call is used.&lt;/p&gt;

&lt;p&gt;filep = create(name, mode)
Here filep and name are as before. If the file already existed, it is truncated to zero length. Creation of a file implies opening for writing as well. The mode argument indicates the permissions which are to be placed on the file by the protection mechanism. To create a file, the user must have write permission in the directory in which the file is being created.&lt;/p&gt;

&lt;p&gt;3.5.3 Write&lt;/p&gt;

&lt;p&gt;Except as indicated below, reading and writing are sequential. This means that if a particular byte in the file was the last byte written (or read), the next I/O call implicitly refers to the first following byte. For each Open file there is a pointer, maintained by the system, which always indicates the next byte to be read or written. If n bytes are read, the pointer advances by n bytes.&lt;/p&gt;

&lt;p&gt;Once a file is open for writing, the following call may be used.&lt;/p&gt;

&lt;p&gt;nwritten = write(filep, buffer, count)
Buffer is the address of count sequentially stored bytes (words in UNIX-7) which will be written onto the file. nwritten is the number of bytes actually written; except in rare cases it is the same as count. Occasionally, an error may be indicated; for example if paper tape is being written, an error occurs if the tape runs out.&lt;/p&gt;

&lt;p&gt;For disk files which already existed (that is, were opened by open, not create) the bytes written affect only those implied by the position of the write pointer and the number of bytes written; no other part of the file is changed.&lt;/p&gt;

&lt;p&gt;3.5.4 Read&lt;/p&gt;

&lt;p&gt;To read, the call is&lt;/p&gt;

&lt;p&gt;nread = read(filep, buffer, count)
Up to count bytes are read from the file into buffer. The number actually read is returned as nread. Every program must be prepared for the possibility that nread is less than count. If the read pointer is so near the end of the file that reading count characters would cause reading beyond the end, only sufficient bytes are transmitted to reach the end of the file. Furthermore, devices like the typewriters work in units of lines. Suppose, for example, that before anything has been typed a program tries to read 128 characters from the console. This forces the program to wait, since nothing has been typed. The user now types a line consisting, say, of 10 characters and hits the &amp;quot;new line&amp;quot; key. At this point the read call would return indicating 11 characters read (including the new line). On the other hand, it is permissible to read fewer characters than were typed without losing information; for example bytes may be picked up one at a time.&lt;/p&gt;

&lt;p&gt;When the read call returns with nread equal to zero, it indicates the end of the file. For disk files this occurs when the read pointer becomes equal to the current size of the file. It is possible to generate an end-of-file from a typewriter by use of an escape sequence which depends on the device used.&lt;/p&gt;

&lt;p&gt;3.5.5 Seek&lt;/p&gt;

&lt;p&gt;To do &amp;quot;random&amp;quot;, that is, direct access I/O it is only necessary to move the read or write pointer to the appropriate location in the file.&lt;/p&gt;

&lt;p&gt;seek(filep, base, offset)
The read pointer (respectively write pointer) associated with filep is moved to a position offset words from the beginning, from the current position of the pointer, or from the end of the file, depending on whether base is O, 1, or 2. Offset may he negative to move the pointer backwards. For some devices (e.g. paper tape and typewriters) seek calls are meaningless and are ignored.&lt;/p&gt;

&lt;p&gt;3.5.6 Tell&lt;/p&gt;

&lt;p&gt;The current position of the pointer may be discovered as follows:&lt;/p&gt;

&lt;p&gt;offset = tell(filep, base)
As with seek, filep is the file descriptor for an open file, and base specifies whether the desired offset is to be measured from the beginning of the file, from the current position of the pointer, or from the end. In the second case, of course, the result is always zero.&lt;/p&gt;

&lt;p&gt;Implementation of the File System
As mentioned in section 3.2 above, a directory entry contains only a name for the associated file and a pointer to the file itself. This pointer is an integer called the i-number (for identification number) of the file. When the file is accessed, its i-number is looked up in a system table stored in a known part of the disk. The entry thereby found (the file&amp;#39;s i-node) contains the description of the file:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;its owner;&lt;/li&gt;
&lt;li&gt;its protection bits;&lt;/li&gt;
&lt;li&gt;the physical disk addresses for the file contents;&lt;/li&gt;
&lt;li&gt;its size;&lt;/li&gt;
&lt;li&gt;times of creation and last modification;&lt;/li&gt;
&lt;li&gt;the number of links to the file; that is, the number of
 times it appears in a directory;&lt;/li&gt;
&lt;li&gt;bits indicating whether the file is a directory and whether
 it is special (in which case the size and disk addresses
 are meaningless);&lt;/li&gt;
&lt;li&gt;a bit indicating whether the file is &amp;quot;large&amp;quot; or &amp;quot;small.&amp;quot;
There is space in each i-node for eight disk addresses. A file which fits into eight or fewer 64-word (128-byte) blocks is considered small; in this case the addresses of the blocks themselves are stored. For large files, each of the eight disk addresses may point to an indirect block of 64 words containing the addresses of the blocks constituting the file itself. Thus files may be as large as 864128, or 65,536 bytes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When the number of links to a file drops to zero, its contents are freed and its i-node is marked unused.&lt;/p&gt;

&lt;p&gt;To the user, both reading and writing of files appears to be synchronous and unbuffered. That is, immediately after return from a read call the data is available, and conversely after a write the user&amp;#39;s workspace may be reused. In fact the system maintains, unseen by the user, a rather complicated buffering mechanism. Suppose a write call is made specifying transmission of a single byte. UNIX will search its own buffers to see whether the affected disk block currently resides in its own buffers; if not, it will be read in from the disk. Then the affected byte is replaced in the buffer and an entry is made in a list of blocks to be written on the disk. The return from the write call may then take place, although the actual I/O may not be completed until a later time. Conversely, if a single byte is read, the system determines whether the disk block in which the byte is located is already in one of the system&amp;#39;s buffers; if so, the byte can be returned immediately. If not, the block is read into a buffer and the byte picked out. Because sequential reading of a file is so common, UNIX attempts to optimize this situation by prereading the disk block following the one in which the requested byte is found. This strategy tends to minimize and in some cases eliminate disk latency delays.&lt;/p&gt;

&lt;p&gt;A program which reads or writes files in units of 128 bytes has an advantage over a program which reads or writes a single byte at a time, but the gain is not immense. As an example, the editor ed (8.9 and A2.4 below) was originally written, for simplicity, to do I/O one character at a time; it increased its speed by a factor of about two when it was rewritten to use 128-byte units. Because the system attempts to retain copies of the most recently used disk blocks in core, the speed gain in dealing with large units comes principally from elimination of system overhead, not from latency delays.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Feb 2016 13:48:37 +0530</pubDate>
        <link>http://hellodk.github.io///unix_time_sharing_system</link>
        <guid isPermaLink="true">http://hellodk.github.io///unix_time_sharing_system</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Markdown cheat-sheets</title>
        <description>&lt;p&gt;Source : https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&lt;/p&gt;

&lt;h1&gt;H1&lt;/h1&gt;

&lt;h2&gt;H2&lt;/h2&gt;

&lt;h3&gt;H3&lt;/h3&gt;

&lt;h4&gt;H4&lt;/h4&gt;

&lt;h5&gt;H5&lt;/h5&gt;

&lt;h6&gt;H6&lt;/h6&gt;

&lt;h1&gt;Will become a heading&lt;/h1&gt;

&lt;h2&gt;Will become a sub heading&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;This will be Italic&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This will be Bold&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This will be a list item&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This will be a list item&lt;/p&gt;

&lt;p&gt;Add a indent and this will end up as code&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, for H1 and H2, an underline-ish style:&lt;/p&gt;

&lt;h1&gt;Alt-H1&lt;/h1&gt;

&lt;h2&gt;Alt-H2&lt;/h2&gt;

&lt;p&gt;Emphasis, aka italics, with &lt;em&gt;asterisks&lt;/em&gt; or &lt;em&gt;underscores&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Strong emphasis, aka bold, with &lt;strong&gt;asterisks&lt;/strong&gt; or &lt;strong&gt;underscores&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Combined emphasis with &lt;strong&gt;asterisks and &lt;em&gt;underscores&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Strikethrough uses two tildes. ~~Scratch this.~~&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First ordered list item&lt;/li&gt;
&lt;li&gt;Another item
⋅⋅* Unordered sub-list. &lt;/li&gt;
&lt;li&gt;Actual numbers don&amp;#39;t matter, just that it&amp;#39;s a number
⋅⋅1. Ordered sub-list&lt;/li&gt;
&lt;li&gt;And another item.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&amp;#39;ll use three here to also align the raw Markdown).&lt;/p&gt;

&lt;p&gt;⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅
⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unordered list can use asterisks&lt;/li&gt;
&lt;li&gt;Or minuses&lt;/li&gt;
&lt;li&gt;Or pluses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.com&quot;&gt;I&amp;#39;m an inline-style link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.com&quot; title=&quot;Google&amp;#39;s Homepage&quot;&gt;I&amp;#39;m an inline-style link with title&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mozilla.org&quot;&gt;I&amp;#39;m a reference-style link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;../blob/master/LICENSE&quot;&gt;I&amp;#39;m a relative reference to a repository file&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://slashdot.org&quot;&gt;You can use numbers for reference-style link definitions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or leave it empty and use the &lt;a href=&quot;http://www.reddit.com&quot;&gt;link text itself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;URLs and URLs in angle brackets will automatically get turned into links. 
http://www.example.com or &lt;a href=&quot;http://www.example.com&quot;&gt;http://www.example.com&lt;/a&gt; and sometimes 
example.com (but not on Github, for example).&lt;/p&gt;

&lt;p&gt;Some text to show that the reference links can follow later.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s our logo (hover to see the title text):&lt;/p&gt;

&lt;p&gt;Inline-style: 
&lt;img src=&quot;https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot;&gt;&lt;/p&gt;

&lt;p&gt;Reference-style: 
&lt;img src=&quot;https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 2&quot;&gt;&lt;/p&gt;

&lt;p&gt;Inline &lt;code&gt;code&lt;/code&gt; has &lt;code&gt;back-ticks around&lt;/code&gt; it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;JavaScript syntax highlighting&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Python syntax highlighting&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;No language indicated, so no syntax highlighting. 
But let&amp;#39;s throw in a &amp;lt;b&amp;gt;tag&amp;lt;/b&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;var s = &amp;quot;JavaScript syntax highlighting&amp;quot;;
alert(s);&lt;/p&gt;

&lt;p&gt;s = &amp;quot;Python syntax highlighting&amp;quot;
print s&lt;/p&gt;

&lt;p&gt;No language indicated, so no syntax highlighting in Markdown Here (varies on Github). 
But let&amp;#39;s throw in a &lt;b&gt;tag&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Colons can be used to align columns.&lt;/p&gt;

&lt;p&gt;| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |&lt;/p&gt;

&lt;p&gt;There must be at least 3 dashes separating each header cell.
The outer pipes (|) are optional, and you don&amp;#39;t need to make the 
raw Markdown line up prettily. You can also use inline Markdown.&lt;/p&gt;

&lt;p&gt;Markdown | Less | Pretty
--- | --- | ---
&lt;em&gt;Still&lt;/em&gt; | &lt;code&gt;renders&lt;/code&gt; | &lt;strong&gt;nicely&lt;/strong&gt;
1 | 2 | 3&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quote break.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a very long line that will still be quoted properly when it wraps. Oh boy let&amp;#39;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can &lt;em&gt;put&lt;/em&gt; &lt;strong&gt;Markdown&lt;/strong&gt; into a blockquote. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;dl&gt;
  &lt;dt&gt;Definition list&lt;/dt&gt;
  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;

  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;
  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Three or more...&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Hyphens&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Asterisks&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Underscores&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a line for us to start with.&lt;/p&gt;

&lt;p&gt;This line is separated from the one above by two newlines, so it will be a &lt;em&gt;separate paragraph&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This line is also a separate paragraph, but...
This line is only separated by a single newline, so it&amp;#39;s a separate line in the &lt;em&gt;same paragraph&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;v=YOUTUBE_VIDEO_ID_HERE
&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg&quot; 
alt=&quot;IMAGE ALT TEXT HERE&quot; width=&quot;240&quot; height=&quot;180&quot; border=&quot;10&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg&quot; alt=&quot;IMAGE ALT TEXT HERE&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Feb 2016 13:48:37 +0530</pubDate>
        <link>http://hellodk.github.io///mark_down_cheatsheet</link>
        <guid isPermaLink="true">http://hellodk.github.io///mark_down_cheatsheet</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>RethinkDb installation on Ubuntu-14.04</title>
        <description>&lt;p&gt;Let&amp;#39;s get some hands on rethinkdb today and find it out yourself.&lt;/p&gt;

&lt;p&gt;So what is rethinkdb? Well, to say...rethinkdb is an open-source, scalable JSON database built from the ground up for the realtime web. RethinkDB inverts the traditional database architecture by exposing an exciting new access model – instead of polling for changes, the developer can tell RethinkDB to continuously push updated query results to applications in realtime. RethinkDB’s realtime push architecture dramatically reduces the time and effort necessary to build scalable realtime apps. RethinkDB also offers a flexible query language, intuitive operations and monitoring APIs, and is easy to setup and learn. Just like any other database solution, rethinkdb ships as a client-server component model. The installation process for both the server and the client are illustrated below:&lt;/p&gt;

&lt;p&gt;How to Install RethinkDb:
1. Add the RethinkDB PPA to your list of repositories : source /etc/lsb-release &amp;amp;&amp;amp; echo &amp;quot;deb http://download.rethinkdb.com/apt $DISTRIB_CODENAME main&amp;quot; | sudo tee /etc/apt/sources.list.d/rethinkdb.list&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add the keys:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;wget -qO- http://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Update the repository:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;sudo apt-get update&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the rethinkdb server via apt-get:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;sudo apt-get -y install rethinkdb&lt;/p&gt;

&lt;p&gt;Install rethinkdb client:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the python-pip package:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;sudo apt-get install python-pip&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the rethinkdb python client:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;sudo pip install rethinkdb :&lt;/p&gt;

&lt;p&gt;The above steps ensure that rethinkdb is installed on the system, while it does not ensures that this will start the rethinkdb service on system startup. You still need to start the rethinkdb service using the below command&lt;/p&gt;

&lt;p&gt;The above command will ensure that rethinkdb is running as a terminal process, and will exit once the terminal is closed, or the process is killed, in short it will not run rethinkdb as a background service.&lt;/p&gt;

&lt;p&gt;To start rethinkdb as a service, please follow the below steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to /etc/rethinkdb and you will get the file, default.conf.sample&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the file to /etc/rethinkdb/instances.d and rename the file as per your requirements ensuring the extension is .conf only. Say for example the file name is rethinkdb1.conf&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now open the file /etc/rethinkdb/instances.d/rethinkdb1.conf and modify the paramaters as per your requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If setting up a cluster, I suggest do change the server-name to somethink like &amp;#39;rethinkdb-primary&amp;#39; or &amp;#39;rethinkdb-1&amp;#39; or &amp;#39;master&amp;#39; or &amp;#39;slave&amp;#39;. This will ensure that we have a meaningful naming convention for our cluster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The default port details are :&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;29015 : Rethinkdb listens for intracluster connections&lt;/p&gt;

&lt;p&gt;28015 : Rethinkdb listens for client driver connections&lt;/p&gt;

&lt;p&gt;8080 : Rethinkdb listens for administrative HTTP connections&lt;/p&gt;

&lt;p&gt;22 : For SSH. The server uses public key authentication.&lt;/p&gt;

&lt;p&gt;80 : For HTTP. It is used during the setup process but otherwise redirects to HTTPS.&lt;/p&gt;

&lt;p&gt;443 : For HTTPS. An Nginx server sits between RethinkDB and the world and provides basic HTTP authentication and secure HTTPS connections for the web UI&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Jan 2016 15:48:00 +0530</pubDate>
        <link>http://hellodk.github.io///rethinkdb_installation_on%20_ubuntu-14.04</link>
        <guid isPermaLink="true">http://hellodk.github.io///rethinkdb_installation_on%20_ubuntu-14.04</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Getting started with Cassandra</title>
        <description>&lt;p&gt;The Growth of Big Data&lt;/p&gt;

&lt;p&gt;Big Data is one of the key forces driving the growth and popularity of NoSQL for business. The almost limitless array of data collection technologies ranging from simple online actions to point of sale systems to GPS tools to smartphones and tablets to sophisticated sensors – and many more – act as force multipliers for data growth.&lt;/p&gt;

&lt;p&gt;In fact, one of the first reasons to use NoSQL is because you have a Big Data project to tackle. A Big Data project is normally typified by:&lt;/p&gt;

&lt;p&gt;High data velocity – lots of data coming in very quickly, possibly from different locations.
Data variety – storage of data that is structured, semi-structured and unstructured.
Data volume – data that involves many terabytes or petabytes in size.
Data complexity – data that is stored and managed in different locations or data centers.&lt;/p&gt;

&lt;p&gt;Datamodel   Performance Scalability Flexibility Complexity  Functionality
Key-value store High    High    High    None    Variable (None)
Column Store    High    High    Moderate    Low Minimal
Document Store  High    Variable (High) High    Low Variable (Low)
Graph Database  Variable    Variable    High    High    Graph Theory&lt;/p&gt;

&lt;p&gt;massively scalable open source NoSQL database. Cassandra is perfect for managing large amounts of structured, semi-structured, and unstructured data across multiple data centers and the cloud. Cassandra delivers continuous availability, linear scalability, and operational simplicity across many commodity servers with no single point of failure, along with a powerful dynamic data model designed for maximum flexibility and fast response times&lt;/p&gt;

&lt;p&gt;built-for-scale architecture means that it is capable of handling petabytes of information and thousands of concurrent users/operations per second.&lt;/p&gt;

&lt;p&gt;An apache Software Foundation project, Cassandra is column oriented database and is an open source distributed database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure.&lt;/p&gt;

&lt;p&gt;Cassandra does not support joins or subqueries. Rather, Cassandra emphasizes denormalization through features like collections&lt;/p&gt;

&lt;p&gt;CQL - Cassandara Query Language&lt;/p&gt;

&lt;p&gt;Each node in a cluster can accept read and write requests, regardless of where the data is actually located in the cluster.&lt;/p&gt;

&lt;p&gt;When a node goes down, read/write requests can be served from other nodes in the network.&lt;/p&gt;

&lt;p&gt;The key components of Cassandra are as follows −
Node − It is the place where data is stored.
Data center − It is a collection of related nodes.
Cluster − A cluster is a component that contains one or more data centers.
Commit log − The commit log is a crash-recovery mechanism in Cassandra. Every write operation is written to the commit log.
Mem-table − A mem-table is a memory-resident data structure. After commit log, the data will be written to the mem-table. Sometimes, for a single-column family, there will be multiple mem-tables.
SSTable − It is a disk file to which the data is flushed from the mem-table when its contents reach a threshold value.
Bloom filter − These are nothing but quick, nondeterministic, algorithms for testing whether an element is a member of a set. It is a special kind of cache. Bloom filters are accessed after every query.&lt;/p&gt;

&lt;h2&gt;Commands:&lt;/h2&gt;

&lt;p&gt;nodetool cfstats : displays statistics for each table and keyspace.
nodetool cfhistograms : provides statistics about a table, including read/write latency, row size, column count, and number of SSTables.
nodetool netstats : provides statistics about network operations and connections.
nodetool tpstats : provides statistics about the number of active, pending, and completed tasks for each stage of Cassandra operations by thread pool.
nodetool status :&lt;/p&gt;

&lt;p&gt;cqlsh &lt;machine ip&gt; -  connects to the machine cqlsh&lt;/p&gt;

&lt;h2&gt;cqlsh command list:&lt;/h2&gt;

&lt;p&gt;HELP - Displays help topics for all cqlsh commands.
CAPTURE - Captures the output of a command and adds it to a file.
CONSISTENCY - Shows the current consistency level, or sets a new consistency level.
COPY - Copies data to and from Cassandra.
DESCRIBE - Describes the current cluster of Cassandra and its objects.
EXPAND - Expands the output of a query vertically.
EXIT - Using this command, you can terminate cqlsh.
PAGING - Enables or disables query paging.
SHOW - Displays the details of current cqlsh session such as Cassandra version, host, or data type assumptions.
SOURCE - Executes a file that contains CQL statements.
TRACING - Enables or disables request tracing.&lt;/p&gt;

&lt;h2&gt;Upgrading:&lt;/h2&gt;

&lt;p&gt;mkdir ~/cassandra&lt;em&gt;backup
sudo cp -r /etc/cassandra/* ~/cassandra&lt;/em&gt;backup
sudo vi /etc/cassandra/cassandra.yaml and edit num&lt;em&gt;tokens to 1 and uncomment the initial&lt;/em&gt;token and set it to 1
nodetool upgradesstables
nodetool drain
sudo service cassandra stop
sudo cp -r /etc/cassandra/* ~/cassandra&lt;em&gt;backup&lt;/em&gt;new
sudo apt-get install cassandra=2.1.12
Open the old and new cassandra.yaml files and diff them.
Merge the diffs by hand, including the partitioner setting, from the old file into the new one.
Do not use the default partitioner setting in the new cassandra.yaml because it has changed in this release to the Murmur3Partitioner. The Murmur3Partitioner can only be used for new clusters. After data has been added to the cluster, you cannot change the partitioner without reworking tables, which is not practical. Use your old partitioner setting in the new cassandra.yaml file.
Save the file as cassandra.yaml.&lt;/p&gt;

&lt;p&gt;Configuration file &amp;#39;/etc/cassandra/cassandra.yaml&amp;#39;
 ==&amp;gt; Modified (by you or by a script) since installation.
 ==&amp;gt; Package distributor has shipped an updated version.
   What would you like to do about it ?  Your options are:
    Y or I  : install the package maintainer&amp;#39;s version
    N or O  : keep your currently-installed version
      D     : show the differences between the versions
      Z     : start a shell to examine the situation
 The default action is to keep your current version.
*** cassandra.yaml (Y/I/N/O/D/Z) [default=N] ? &lt;/p&gt;

&lt;p&gt;************&lt;strong&gt;&lt;em&gt;Inserting values into tables&lt;/em&gt;&lt;/strong&gt;**************************
CREATE KEYSPACE tutorialspoint WITH replication = {
  &amp;#39;class&amp;#39;: &amp;#39;NetworkTopologyStrategy&amp;#39;,
  &amp;#39;cdr_record&amp;#39;: &amp;#39;2&amp;#39;
};&lt;/p&gt;

&lt;p&gt;INSERT INTO tutorialspoint.emp (emp&lt;em&gt;id,emp&lt;/em&gt;city,emp&lt;em&gt;name,emp&lt;/em&gt;phone,emp_sal) VALUES(3,&amp;#39;Kolkata&amp;#39;,&amp;#39;Stag1&amp;#39;,8791134412,60);&lt;/p&gt;

&lt;p&gt;UPDATE TABLE emp(
   emp&lt;em&gt;id int PRIMARY KEY,
   emp&lt;/em&gt;name text,
   emp&lt;em&gt;city text,
   emp&lt;/em&gt;sal varint,
   emp_phone varint);&lt;/p&gt;

&lt;p&gt;INSERT INTO TABLE emp(emp&lt;em&gt;id int,emp&lt;/em&gt;name,emp&lt;em&gt;city,emp&lt;/em&gt;sal,emp_phone) VALUES(1,&amp;#39;dk&amp;#39;,&amp;#39;Bangalore&amp;#39;,24,9964014500);&lt;/p&gt;

&lt;p&gt;/usr/local/freeswitch/bin/fs_cli -x &amp;quot;originate  freetdm/8/a/009716337516 &amp;amp;park()&amp;quot;&lt;/p&gt;

&lt;h2&gt;Nodetool Command Set:&lt;/h2&gt;

&lt;p&gt;nodetool status
nodetool info
nodetool -host 10.60.8.23 ring&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Jan 2016 15:48:00 +0530</pubDate>
        <link>http://hellodk.github.io///getting_familiar_with_cassandra</link>
        <guid isPermaLink="true">http://hellodk.github.io///getting_familiar_with_cassandra</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>5 interesting cloud predictions for 2016</title>
        <description>&lt;ol&gt;
&lt;li&gt;It&amp;#39;s time for IOT-&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The IOT or the Internet of Things has been a buzzword around for quite some time. And finally the time has come for IOT to be on boom. It is predicted that by the end of 2016, there will be one billion connected devices.&lt;/p&gt;

&lt;p&gt;The Internet of Things is all set to harness the awesomeness of Cloud computing this year. IOT and Cloud combined together breaks free all limitations. The duo combo can help right from analyzing the weather conditions at your home and water the plants to conducting major surgeries remotely to powering drones for military, logistics etc. and what not!!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cloud is expanding - AWS coming to India in 2016. Owing to the huge demand in the Indian sub-continent for Cloud services, AWS(Amazon Web Services)- one of the top cloud services provider has plans to setup India region in 2016. Do I still need to say anything more on this?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;More and more startups will be focusing towards adapting cloud culture - Cloud is so versatile and flexible, it allows you to work from any corner of the world. Startups ideally do not have the infrastructure/resources to manage their own data-centers or hardware. Cloud provides then with Infrastructure as a Service at a very affordable rates, so they can focus more on their product.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Outcast for more flexible cloud apps – The need for more flexible cloud apps can not be denied. With the rise in clod computing, will come the rise for ease of accessibility. This will trigger quiet a lot of cloud apps to outcast in the near future, similar to AWS CLI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With the rise in better internet services and bandwidth in the second and third world&amp;#39;s Dockerization/containerization will be emerging as a critical technology and on rise and will soon be a critical component in deployments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security - Cloud security should be a major concern for everyone working on cloud/IOT. One should perform a security assessment before starting their design. For IOT&amp;#39;s, using an RTOS does not ensure security and neither does Encryption. One should ensure all attack vectors are addressed. Even if you are able to secure the cloud, rest assured it may not be enough because your device can still be compromised.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 28 Jan 2016 15:48:00 +0530</pubDate>
        <link>http://hellodk.github.io///5_interesting_cloud_predictions_2016</link>
        <guid isPermaLink="true">http://hellodk.github.io///5_interesting_cloud_predictions_2016</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>About</title>
        <description>&lt;p&gt;Too often we under-estimate the power of a touch, a smile, a kind word, a listening ear, an honest compliment, or the smallest act of caring, all of which have the potential to turn a life around. 
The idea behind writing this blog/website is to conect to people and share my experiences with them.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Dec 2015 15:48:00 +0530</pubDate>
        <link>http://hellodk.github.io///about</link>
        <guid isPermaLink="true">http://hellodk.github.io///about</guid>
        
        <category>about</category>
        
        
        <category>casper</category>
        
      </item>
    
      <item>
        <title>Creating a Highly Available Distributed Messaging System</title>
        <description>&lt;p&gt;Creating a Highly Available Distributed Messaging Queue Cluster with RabbitMQ-3.5.6
What is rabbitmq?&lt;/p&gt;

&lt;p&gt;Rabbitmq is a robust yet easy to use messaging broker service for applications. Also referred as message-oriented middleware, rabbitmq implements Advanced Messaging Queue Protocol(AMQP).&lt;/p&gt;

&lt;p&gt;Rabbitmq server is written in Erlang programming language, and built on top of Open Telecom Platform framework for clustering and fail-over. Client libraries to interface with the broker are available for all major programming languages.&lt;/p&gt;

&lt;p&gt;Rabbitmq runs on all major operating systems and supports a huge number of developer platforms. Besides being open source, rabbitmq is also commercially supported.&lt;/p&gt;

&lt;p&gt;Firewall Settings(Listening ports):
amqp - 5672
clustering - 25672
management nodes - 15672&lt;/p&gt;

&lt;p&gt;How do we install rabbitmq?
Prerequisites:
Network connection between nodes must be reliable.&lt;/p&gt;

&lt;p&gt;All nodes must run the same version of Erlang and RabbitMQ.&lt;/p&gt;

&lt;p&gt;All TCP ports should be open between nodes, see the firewall section above.&lt;/p&gt;

&lt;p&gt;Host entries across the nodes should be the same:
In the /etc/hosts file of your system, append the hostname corresponding to the IP address, and the same data should be present across all the machines in the cluster to maintain uniformity. e.g. we have 3 machines:&lt;/p&gt;

&lt;p&gt;a.b.c.d with hostname as rabbitmq1
e.f.g.h with hostname as rabbitmq2
i.j.k.l with hostname as rabbitmq3
then in the /etc/hosts on all the 3 machines, add the below lines:&lt;/p&gt;

&lt;p&gt;a.b.c.d rabbitmq1
e.f.g.h rabbitmq2
i.j.k.l rabbitmq3
and that should suffice to solve your issues with host entries. Rabbitmq is very sensitive towards hostnames, hence this step is of quiet importance. Once done, do verify if the nodes are ping-able from every node.&lt;/p&gt;

&lt;p&gt;For installing rabbitmq-server, use the below commands:
sudo apt-get install -fy erlang-nox python-pip git-core python-setuptools git-core
wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.5.6/rabbitmq-server&lt;em&gt;3.5.6-1&lt;/em&gt;all.deb
sudo dpkg -i rabbitmq-server&lt;em&gt;3.5.6-1&lt;/em&gt;all.deb
and there you go, your rabbitmq-server should be up and running. You can verifythis by the below command:&lt;/p&gt;

&lt;p&gt;sudo service rabbitmq-server status&lt;/p&gt;

&lt;p&gt;Now to setup your rabbitmq cluster with slave nodes, please follow the below steps:
sudo apt-get install -fy erlang-nox python-pip git-core python-setuptools git-core
sudo pip install pika==0.10.0 or pip install pika==0.10.0(if using virtual-env)
wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.5.6/rabbitmq-server&lt;em&gt;3.5.6-1&lt;/em&gt;all.deb
sudo dpkg -i rabbitmq-server&lt;em&gt;3.5.6-1&lt;/em&gt;all.deb
Synchronizing the erlang.cookie file across all the machines:
This is again a very important step for setting up rabbitmq cluster. The file itself is storing the value without a carriage return nor a line feed. This value needs to go into the slaves the same way as it is on the master.&lt;/p&gt;

&lt;p&gt;First stop the rabbitmq-server on all the slave machines using the below command:&lt;/p&gt;

&lt;p&gt;sudo service rabbitmq-server stop
echo -n &amp;quot;&lt;contents of .erlang.cookie form master server&gt;&amp;quot; &amp;gt; /var/lib/rabbitmq/.erlang.cookie
eg: echo -n &amp;quot;DQRRLCTUGOBCRFNPIABC&amp;quot; &amp;gt; /var/lib/rabbitmq/.erlang.cookie&lt;/p&gt;

&lt;p&gt;The file should be exactly the same as it is on the master server also ensuring that the permission level for all these file is &amp;quot;400&amp;quot; and the ownership of this file remains with rabbitmq user.&lt;/p&gt;

&lt;p&gt;Rabbitmq uses mnesia db as it&amp;#39;s default, make sure you delete mnesia before starting rabbitmqserver:
sudo rm -rf /var/lib/mnesia&lt;/p&gt;

&lt;p&gt;Starting the rabbitmq-server:
Now that the .erlang.cookie file has been synced(manually) from the master node to all the slave nodes, and the mnesia db has also been deleted, we are good to go and start the rabbitmq-server.&lt;/p&gt;

&lt;p&gt;sudo service rabbitmq-server start
sudo rabbitmqctl stop&lt;em&gt;app
sudo rabbitmqctl reset
sudo rabbitmqctl join&lt;/em&gt;cluster rabbit@rabbitmq1 (assuming rabbitmq1 as master)
sudo rabbitmqctl start_app
RabbitMq can screw your cluster formation, if you do are not taking care of the host name and the entries inside /etc/hosts file properly.&lt;/p&gt;

&lt;p&gt;Check the cluster status using the below command:
sudo rabbitmqctl cluster_status&lt;/p&gt;

&lt;p&gt;Set the HA Policy:&lt;/p&gt;

&lt;p&gt;The following command will sync all the queues across all nodes:&lt;/p&gt;

&lt;p&gt;rabbitmqctl set_policy ha-all &amp;quot;&amp;quot; &amp;#39;{&amp;quot;ha-mode&amp;quot;:&amp;quot;all&amp;quot;,&amp;quot;ha-sync-mode&amp;quot;:&amp;quot;automatic&amp;quot;}&amp;#39;&lt;/p&gt;

&lt;p&gt;Enabling the user management plugin:
Rabbitmq also provides with a simple management console. The console can be enabled for each machine using the below command:&lt;/p&gt;

&lt;p&gt;sudo rabbitmq-plugins enable rabbitmq_management&lt;/p&gt;

&lt;p&gt;Now you can access the console on the following address: &amp;quot;http://&lt;rabbitmq machine ip with plugin enabled&gt;:15672&amp;quot;&lt;/p&gt;

&lt;p&gt;It will ask for user id and password. you need to provide the user id and password for authentication.&lt;/p&gt;

&lt;p&gt;In-case you have not yet created any user, the you can do so by the below commands:
sudo rabbitmqctl add&lt;em&gt;user &lt;user id&gt; &lt;password&gt;
sudo rabbitmqctl set&lt;/em&gt;user&lt;em&gt;tags &lt;user id&gt; administrator
sudo rabbitmqctl set&lt;/em&gt;permissions -p / &lt;user id&gt; &amp;quot;.&lt;em&gt;&amp;quot; &amp;quot;.&lt;/em&gt;&amp;quot; &amp;quot;.*&amp;quot;&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Dec 2015 15:48:00 +0530</pubDate>
        <link>http://hellodk.github.io///Creating-a-Highly-Available-Distributed-Messaging-Queue-Cluster-with-RabbitMQ-3.5.6</link>
        <guid isPermaLink="true">http://hellodk.github.io///Creating-a-Highly-Available-Distributed-Messaging-Queue-Cluster-with-RabbitMQ-3.5.6</guid>
        
        <category>tutorials</category>
        
        
        <category>casper</category>
        
      </item>
    
      <item>
        <title>Understanding Git-Flow</title>
        <description>&lt;p&gt;Understanding Git Flow for(ubuntu-14.04):&lt;/p&gt;

&lt;p&gt;what is git flow?
Usage?
How can it be helpful?&lt;/p&gt;

&lt;p&gt;Install git flow using the below command:&lt;/p&gt;

&lt;p&gt;sudo apt-get install git-flow&lt;/p&gt;

&lt;p&gt;Starting with git flow:
To start with git flow, you first need to initialize it inside an existing repository. This is done by using the below command:&lt;/p&gt;

&lt;p&gt;git flow init&lt;/p&gt;

&lt;p&gt;In-case you want to force re-initialization of git flow, you can use the same command and pass -f as an argument
eg: git flow init -f&lt;/p&gt;

&lt;p&gt;So far cool, this is dead simple, isn&amp;#39;t it? Now let&amp;#39;s see what happens once we do a git flow init. We&amp;#39;ll have to answer a few questions regarding the naming conventions for our branches. For simplicity it is recommended to use the default values.&lt;/p&gt;

&lt;p&gt;$ git flow init -f&lt;/p&gt;

&lt;p&gt;Which branch should be used for bringing forth production releases?
   - develop
   - feature/lint_cleanup
   - master
Branch name for production releases: [master] &lt;/p&gt;

&lt;p&gt;Which branch should be used for integration of the &amp;quot;next release&amp;quot;?
   - develop
   - feature/lint_cleanup
Branch name for &amp;quot;next release&amp;quot; development: [develop] &lt;/p&gt;

&lt;p&gt;How to name your supporting branch prefixes?
Feature branches? [feature/] 
Release branches? [release/] 
Hotfix branches? [hotfix/] 
Support branches? [support/] 
Version tag prefix? [] &lt;/p&gt;

&lt;p&gt;Creating/Deleting a tag:&lt;/p&gt;

&lt;p&gt;Deleting a tag:&lt;/p&gt;

&lt;p&gt;$ git tag -d &lt;tag_name&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Nov 2015 00:00:00 +0530</pubDate>
        <link>http://hellodk.github.io///understanding_git_flow</link>
        <guid isPermaLink="true">http://hellodk.github.io///understanding_git_flow</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Going Agntless with Ansible</title>
        <description>&lt;p&gt;While looking for a light yet powerful Configuration Management tool, I was going through some of the various available tools, and came across Ansible. After having a quick look at the features, something which caught my attention: &amp;quot;Ansible is agent-less&amp;quot;, hence I decided to give it a try. Having used Ansible for some around more than 8+ months configuration management, I personally feel...Ansible is awesome!!
So what is Ansible? Well, it is a configuration management tool, and it empowers you to configure/orchestrate multiple systems at great ease, saving a lot of downtime and resources.
So how does it does that? The answer lies with ssh keys based agent forwarding. Ansible uses ssh for logging to the remote system, and can execute package installation, shell commands, install/update package management systems, clone git and anything under the sun you need for configuration management.
So why don&amp;#39;t you try your hands on Ansible and experience it&amp;#39;s awesomeness....all you need to do is to install it on your host system.&lt;/p&gt;

&lt;p&gt;Ansible does not have it&amp;#39;s own process, and unlike other configuration tolls available, it is agent-less!!&lt;/p&gt;

&lt;p&gt;Ansible ships in 2 forms:
1. Core Ansible
2. Ansible Tower&lt;/p&gt;

&lt;p&gt;Installation:
1. OS package manager:
sudo apt-get install software-properties-common
sudo apt-add-repository ppa:ansible/ansiblesudo apt-get update
sudo apt-get install ansible
2. Via python pip:
sudo pip install ansible&lt;/p&gt;

&lt;p&gt;Ansible uses a configuration file, called host files for doing ssh to the remote machines. By default it is located in /etc/ansible/hosts
All you need to do is to add the host ip and the ssh_username to the file, and the public key of your host to the remote machine and you are all set to go!!&lt;/p&gt;

&lt;p&gt;Commands:
ansible all -i ansible_hosts -m ping
ansible all -m ping -u deepak
ansible -m shell -a &amp;#39;free -m&amp;#39; host1
ansible all -m shell -a &amp;#39;free -m&amp;#39; -u dk&lt;/p&gt;

&lt;p&gt;Playbooks are Ansible’s configuration, deployment, and orchestration language. They can describe a policy you want your remote systems to enforce, or a set of steps in a general IT process.&lt;/p&gt;

&lt;p&gt;Playbooks are written in YAML language, and comprises of Plays&lt;/p&gt;

&lt;p&gt;Running a Playbook in Ansible:
ansible-playbook playbook.yml -f 10&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Apr 2015 15:48:00 +0530</pubDate>
        <link>http://hellodk.github.io///going_agentless_with_ansible</link>
        <guid isPermaLink="true">http://hellodk.github.io///going_agentless_with_ansible</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Camera Basics</title>
        <description>&lt;p&gt;A basic tutorial on handling a DSLR for beginners.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Aug 1963 15:48:00 +0530</pubDate>
        <link>http://hellodk.github.io///camera-basics</link>
        <guid isPermaLink="true">http://hellodk.github.io///camera-basics</guid>
        
        <category>tutorials</category>
        
        <category>photography</category>
        
        
        <category>casper</category>
        
      </item>
    
  </channel>
</rss>
