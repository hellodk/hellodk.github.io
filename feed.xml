<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>A beautiful narrative written over an elegant publishing platform. The story begins here...</description>
    <link>http://hellodk.in///</link>
    <atom:link href="http://hellodk.in///feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 04 Feb 2020 18:18:15 +0530</pubDate>
    <lastBuildDate>Tue, 04 Feb 2020 18:18:15 +0530</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>My Resume Hosted</title>
        <description>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;style&gt;
.tab-1 {position:absolute;left:180px; }

.tab-2 {position:absolute;left:300px; }

p.small {
  line-height: 0.7;
}

p.big {
  line-height: 1.8;
}
&lt;/style&gt;

&lt;head&gt;
	&lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/css/hr_tag.css&quot; /&gt;
	&lt;title&gt;Curriculum Vitae&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;h1&gt;Deepak Gupta&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Email: &lt;span class=&quot;tab-1&quot;&gt;hello.dk@outlook.com&lt;/li&gt;
&lt;li&gt;About.me: &lt;span class=&quot;tab-1&quot;&gt;&lt;a href=&quot;https://about.me/hellodk&quot;&gt;about.me/hellodk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blog: &lt;span class=&quot;tab-1&quot;&gt;&lt;a href=&quot;https://www.hellodk.in&quot;&gt;hellodk.io&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;Github: &lt;span class=&quot;tab-1&quot;&gt;&lt;a href=&quot;https://github.com/hellodk&quot;&gt;github.com/hellodk&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;LinkedIn: &lt;span class=&quot;tab-1&quot;&gt;&lt;a href=&quot;https://www.linkedin.com/in/hellodk&quot;&gt;linkedin.com/in/hellodk&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;Docker Hub: &lt;span class=&quot;tab-1&quot;&gt;&lt;a href=&quot;https://hub.docker.com/r/hellodk&quot;&gt;hub.docker.com/r/hellodk&lt;/a&gt;&lt;/li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;bigHr&quot;&gt;

&lt;h2&gt;Work Experience:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;h3&gt;DevOps Consultant/Trainer, Bengaluru&lt;/h3&gt;&lt;/li&gt;
&lt;h5&gt;June 2018 - PRESENT&lt;/h5&gt;
&lt;p&gt;I&#39;ve helped organisations adopt DevOps tooling/practices, scaling strategies &amp; have delivered 200+ corporate trainings on DevOps tools across the globe to a broad set of audiences(Developers/Sysadmins, Freshers, Architects, CTO&#39;s, VP) with nearabout 95% success rate.&lt;/p&gt;

&lt;li&gt;&lt;h3&gt;DevOps Lead - Moveinsync Technology, Bengaluru&lt;/h3&gt;&lt;/li&gt;
&lt;h5&gt;January 2018 - June 2018&lt;/h5&gt;
&lt;p&gt;Moveinsync is India&#39;s chief employee transportation management solution. I had lead the DevOps team at Moveinsync to build &amp; monitor a highly scalable multi-tenant application on cloud.
I&#39;ve contributed to VAPT, Implementing DR and achieve government certification which helped us to secure more clients.&lt;/p&gt;

&lt;li&gt;&lt;h3&gt;Systems Engineer - Myntra Designs, Bengaluru&lt;/h3&gt;&lt;/li&gt;
&lt;h5&gt;June 2016 - January 2018&lt;/h5&gt;
&lt;p&gt;Myntra Designs is the biggest Indian fashion e-commerce organisation in India.
I was a part of the sysadmin team managing 99.9999% uptime of infrastructure(Datacenter, AWS &amp; Azure), monitoring microservices, API calls, revenue metrics, on-calls, writing internal tools, automating deployments,  database maintenance etc.
&lt;/p&gt;

&lt;li&gt;&lt;h3&gt;DevOps Engineer - Knowlarity Communications, Bengaluru&lt;/h3&gt;&lt;/li&gt;
&lt;h5&gt;January 2015 - May 2016&lt;/h5&gt;
&lt;p&gt;Knowlarity Communications works on AI enabled cloud telephony.
My primary responsibilities were to automate deployments, maintain databases and write API&#39;s to scrub data upto 440 million records, take care of the Billing framework model, creating grafana dashboards, backup and recovery, maintain rabbitmq clusters.
&lt;/p&gt;

&lt;li&gt;&lt;h3&gt;Project Engineer - Wipro Technologies, Bengaluru&lt;/h3&gt;&lt;/li&gt;
&lt;h5&gt;November 2011 - January 2015&lt;/h5&gt;
&lt;p&gt;Wipro Technologies is an Indian MNC providing IT consulting &amp; services.
I was primarily responsible to write applications in Java for telecom OSS and also creating API&#39;s for Openstack implementation.&lt;/p&gt;
&lt;/br&gt;
&lt;/ul&gt;

&lt;hr class=&quot;bigHr&quot;&gt;
&lt;h2&gt;Software Skills:&lt;/h2&gt;
&lt;ul&gt;
&lt;!---li&gt;Programming: 	Python, Java, Golang, Nodejs, C(Agile/Kanban Methodology)&lt;/li&gt;
&lt;li&gt;Web Frameworks: Django, Spring Boot, Flask, Falcon, Spring Cloud&lt;/li&gt;
&lt;li&gt;RDBMS:			MySQL, Postgresql, MariaDB&lt;/li&gt;
&lt;li&gt;NoSQL: Cassandra, Dynamodb, Rethinkdb, MongoDB, Redis, CouchDB&lt;/li&gt;
&lt;li&gt;Monitoring Tools: Nagios, Shinken, Zabbix, Sensu, Icinga2&lt;/li&gt;
&lt;li&gt;Build Tools: Jenkins, Jira, Gerrit&lt;/li&gt;
&lt;li&gt;Cryptocurrency: Blockchain, Bitcoin, Ethereum, Hyperledger&lt;/li&gt;
&lt;li&gt;Load balancers: HA Proxy, Nginx&lt;/li&gt;
&lt;li&gt;CDN: Akamai, CloudFront, Cloudflare&lt;/li&gt;
&lt;li&gt;Web/App servers: Nginx, Apache, Gunicorn, uwsgi, tomcat&lt;/li&gt;
&lt;li&gt;Configuration Management: Ansible, Saltstack, Fabric, Puppet, Chef&lt;/li&gt;
&lt;li&gt;Protocols/ Architectures:	REST, CORBA, SNMP, HTTP, TCP/IP, SIP, Wireshark&lt;/li&gt;
&lt;li&gt;Cloud/ Virtualizations: AWS, Azure, Heroku, OpenStack, Vagrant, KVM, Docker&lt;/li&gt;
&lt;li&gt;Visualizations: Grafana, D3, Kibana, Talend&lt;/li&gt;
&lt;li&gt;Others: RaspberryPi, Spartan 3E, AVR, Elasticsearch, Induino, Arduino, MOSHELL, Debian Packaging, freeswitch, WCDMA, LTE, 3PP, NMS, EMS, FCAPS, RNC, RBS, Scribe, Logstash, Fluentd,heka&lt;/li---&gt;
&lt;li&gt;Cloud Computing: &lt;span class=&quot;tab-2&quot;&gt;  AWS, Azure, Heroku, Openstack&lt;/li&gt;
&lt;li&gt;Container Technologies: &lt;span class=&quot;tab-2&quot;&gt;  Docker, Kubernetes&lt;/li&gt;
&lt;li&gt;Monitoring Tools: &lt;span class=&quot;tab-2&quot;&gt;  Zabbix, Nagios, Icinga2&lt;/li&gt;
&lt;li&gt;SQL Databases: &lt;span class=&quot;tab-2&quot;&gt;  MySQL, PostgreSQL, MariaDB&lt;/li&gt;
&lt;li&gt;NoSQL Databases: &lt;span class=&quot;tab-2&quot;&gt;  MongoDB, Cassandra, Redis&lt;/li&gt;
&lt;li&gt;Web Server/Load Balancers: &lt;span class=&quot;tab-2&quot;&gt;  Nginx, HA Proxy&lt;/li&gt;
&lt;li&gt;Messaging Tools: &lt;span class=&quot;tab-2&quot;&gt;  RabbitMQ, Kafka&lt;/li&gt;
&lt;li&gt;Configuration Management: &lt;span class=&quot;tab-2&quot;&gt;  Ansible, Terraform, Chef, Puppet&lt;/li&gt;
&lt;li&gt;Programming: &lt;span class=&quot;tab-2&quot;&gt;  Java, Python, Golang&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Visualizations: &lt;span class=&quot;tab-2&quot;&gt;  Grafana, D3, Kibana, Talend&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;bigHr&quot;&gt;
&lt;h2&gt;
	Projects Summary:
&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;
&lt;h3&gt;Disaster Recovery
&lt;/h3&gt;&lt;/li&gt;
&lt;p&gt;Creating DR infrastructure, requirement gathering and creation of Kubernetes cluster on bare metal servers and implementing the deployment pipelines - blue-green and canary
Infrastructure &amp; service monitoring, sending alerts over slack and SMS
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;Payments Service:
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
Create payments service for facilitating payments transactions using Java and Spring Boot and implementing analytics with Talend to monitor the payments/orders. Invoved in Sprint Planning, Requirement gathering, Architecture planning, writing unit test-cases, coding configuration of the cluster, managing shards/replicas of the payments database, coordinating UAT and SIT and load tests
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;Centralized Log Management:
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
To monitor logs centrally, we needed a powerful tool. Elasticsearch is what we choose for this project and developed on top of Java using Spring Cloud. Initiated the requirement gathering, created UML diagrams, architecture planning, automated deployment &amp; configuration of the cluster, managing shards and the replicas for elasticsearch cluster, analytics on the data using talend
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;
PCI Compliance:
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
Ensured the Payments setup is PCI DSS compliant by creating network segmentations for servers(DMZ environment) and implementing Intrusion Detection Systems(OSSEC/Alienvault) &amp; patching(Spacewalk) the air gapped systems. Responsible for getting the VAPT(Vulnerability Assessment &amp; Penetration Testing)
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;
	Apollo:
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
App deployment via one click using Ansible, Docker and Kubernetes by  automatically creating templates for tasks using jinja2 templating systems and wrote executors, setting up Jenkins jobs etc.
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;
Sethji:
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
Track AWS/Azure Billing Charges
Bill analysis using ETL &amp; Setup the billing management stack on python and flask
reduced billing costs by 25% by identifying overprovisioned/unused services etc.
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;
	Graphite Grafana Integration
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
monitor services, function calls, throughput, response code status, revenue etc.
Requirement gathering, UML, coding, writing automation, configuration and deployment on Python
&lt;/p&gt;

&lt;li&gt;
&lt;h3&gt;
	Monitoring Setup
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
	Monitoring for complete Infrastructure
Setup monitoring for our infrastructure(hybrid) over Icinga2/Zabbix and Talend
Ensured High Availability of Services
&lt;/p&gt;

&lt;li&gt;&lt;h3&gt;Daily Operations - A usual day in the life of a DevOps&lt;/h3&gt;&lt;/li&gt;
&lt;p&gt;
Developing tools over C++/Java/Python/Golang&lt;/br&gt;
Security Audit - Implemented IDS, DDOS mitigation via fail2ban&lt;/br&gt;
Packet tracing/filtering using customized tool &amp; Wireshark&lt;/br&gt;
Fixing security vulnerabilities in infrastructure&lt;/br&gt;
Implemented key rotation policy&lt;/br&gt;
Implemented HA and reliable RabbitMQ cluster in the infrastructure which served as a backbone for intercommunication between microservices(close to 400+ microservices) with 99.99999% SLA&lt;/br&gt;
DNS, LDAP, Monitoring, Load Balancing over Nginx/HA Proxy&lt;/br&gt;
Reduce data transfer costs &amp; improved performance&lt;/br&gt;
Subnet planning helped reduce the complexity of whitelisting services/IP’s&lt;/br&gt;
Network planning for infrastructure migration&lt;/br&gt;
Helped setup Azure account with basic services like DNS, LDAP, monitoring&lt;/br&gt;
&lt;/p&gt;

&lt;li&gt;
	&lt;h3&gt;
	Clickstream Analytics
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
A single point to handle all clickstream data and do analytics on that
Integrating the existing SQL databases with ETL(Talend) and creating dashboards
Fine details like demography, geographic locations, time etc were extracted
Used the analytics data to create recommendation engine
&lt;/p&gt;

&lt;li&gt;
&lt;h3&gt;
	WRAN CM OSS-RC (Operational Support System – Radio &amp; Core)
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
OSS-RC is a comprehensive domain manager for network infrastructure deployed with operators around the world integrating and managing a wide range of network components. Together with IP and Broadband offering, it’s a comprehensive solution for total network management of the telecommunications infrastructure
Design of OSSRC products, configuring network elements of OSS-RC using Spring/Java
Sprint Planning, Requirement gathering, Implementation for new changes proposed, creating user stories
followed Test Driven Development, Coordinating in SIT, UAT
&lt;/p&gt;
&lt;li&gt;
&lt;h3&gt;
	Cloud Adapter
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
Integrate cloud services with services on physical machines for centralized monitoring
Set up the development environment, configurations, writing test cases using J-unit
wrote authentication modules, schedulers, startup scripts, managing notifications on Java
&lt;/p&gt;
&lt;li&gt;
&lt;h3&gt;
	Billing Framework
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
The most challenging work for any organisation, taking care of different types of contracts etc.
Created the Billing Framework using Python and Django
&lt;/p&gt;
&lt;li&gt;
&lt;h3&gt;
	NDNC Deployment
&lt;/h3&gt;
&lt;/li&gt;
&lt;p&gt;
Being a telemarketer, we can call only to non-dnd registered numbers
TRAI only provides dnd data in form of CSV(500 million rows)
Challenge was to develop our own NDNC scrubbing solution and keep it updated using Spring Boot
Requirement gathering, UML/flow diagrams getting the NDNC data, feeding the data into our database, writing API&#39;s, automated product deployment automation, performance tuning etc. using Python/Falcon and RethinkDB
&lt;/p&gt;&lt;/ul&gt;
&lt;hr class=&quot;bigHr&quot;&gt;
&lt;h3&gt;
	Side Projects
&lt;/h3&gt;
&lt;ul&gt;
&lt;p&gt;
&lt;li&gt;Developed several multiplayer games in Python, e.g. Stopwatch, Pong, Memory, Spaceship, Blackjack &amp; Rice Rocks Full Game
&lt;/li&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;li&gt;
RTL design &amp; Synthesis of a 32-bit Microprocessor using VHDL
&lt;/li&gt;
Our goal was to design a 32-bit microprocessor in VHDL, which will perform arithmetic and logic function that is on a standard 32-bit microprocessor
Target Device: Spartan 3E Tools
Used: Xilinx 9.1, Modelsim SE 5.7f
&lt;/p&gt;

&lt;p&gt;
&lt;li&gt;
Blockchain Signalling System
&lt;/li&gt;
Used blockchain for Signalling DDOS attacks in a cooperative &amp; distributed network defence
&lt;/p&gt;

&lt;p&gt;
&lt;li&gt;
Real-time Bitcoin Price Monitor using Arduino
&lt;/li&gt;
&lt;/p&gt;

&lt;p&gt;
	&lt;li&gt;
Decentralized fleet tracking with blockchain
&lt;/li&gt;
Asset tracking mechanism in a decentralized fashion. Each action, event, alerts were stored in the blockchain
&lt;/p&gt;

&lt;p&gt;
&lt;li&gt;
Developed an own cryptocurrency for testing purpose using Litecoin
&lt;/li&gt;
&lt;/p&gt;
&lt;/ul&gt;

&lt;hr class=&quot;bigHr&quot;&gt;

&lt;h3&gt;
	Awards &amp; Achievements:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Maestro Award for Making a Difference in the Account&lt;/li&gt;
&lt;li&gt;High Flyer Award for individual contribution in the Account&lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;bigHr&quot;&gt;

&lt;h3&gt;
Certifications:
&lt;/h3&gt;

&lt;ul&gt;
	&lt;li&gt;Big Data, Cloud Computing, &amp; CDN Emerging Technologies&lt;/li&gt;
	&lt;li&gt;Blockchain for Developers&lt;/li&gt;
	&lt;li&gt;Interfacing with the Raspberry Pi&lt;/li&gt;
	&lt;li&gt;An Introduction to Interactive Programming with Python(RICE University)&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</description>
        <pubDate>Thu, 02 Apr 2020 00:00:00 +0530</pubDate>
        <link>http://hellodk.in///resume</link>
        <guid isPermaLink="true">http://hellodk.in///resume</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>A Failed Trek to Everest Base Camp</title>
        <description>&lt;h1&gt;STAY TUNED WORK IN PROGRESS&lt;/h1&gt;</description>
        <pubDate>Fri, 02 Mar 2018 01:18:00 +0000</pubDate>
        <link>http://hellodk.in///failed_trek_to_everest_base_camp</link>
        <guid isPermaLink="true">http://hellodk.in///failed_trek_to_everest_base_camp</guid>
        
        <category>travel</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>just landed in Malaysia - Truly Asia</title>
        <description>&lt;html&gt;
HELLO..WORK IN PROGRESS
&lt;/html&gt;</description>
        <pubDate>Sat, 24 Feb 2018 06:30:00 +0000</pubDate>
        <link>http://hellodk.in///just_landed_in_malaysia</link>
        <guid isPermaLink="true">http://hellodk.in///just_landed_in_malaysia</guid>
        
        <category>travel</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>REST API Best Practices</title>
        <description>&lt;html&gt;
REST API ARCHITECTURE – BEST PRACTICES

SOA(Service Oriented Architecture) has become a foundation for the most of the application that are developed today&lt;/br&gt;
A service oriented architecture is an architectural pattern which enables collection of services to communicate with external/internal parties to pass data or for services coordinating&lt;/br&gt;
Let’s start from what’s a service.
What’s a Service/API
A service is a function that is well-defined, self-contained, and does not depend on the context or state of other services.
In other words an interface used by software components to communicate with each other&lt;/br&gt;
Let understand the difference between API and Web Services&lt;/br&gt;
A Web Service is a type of API, almost always one that operates over HTTP&lt;/br&gt;
In the modern world there are two types of web services that are used.
SOAP
REST
We can’t compare REST and SOAP since SOAP is a protocol and REST is an architectural pattern&lt;/br&gt;
People mostly get confused when selecting one for their application&lt;/br&gt;
If you are wondering what’s the difference between these two you can get a good start from here and here.
Our today’s focus is on REST&lt;/br&gt;
How we can implement a perfect REST API? What are the best practices? Let’s get down to business.
REST Best Practices 101
1&lt;/br&gt;
Abstract vs Concrete
When designing a REST API you should consider to make API concrete as possible&lt;/br&gt;
It will make the API less confusing to the consumers.
Abstract vs Concrete 
Abstract vs Concrete
2&lt;/br&gt;
CRUD Operations
There are four available methods when designing a REST API which are GET, POST, PUT and DELETE&lt;/br&gt;
Below is the proposed methodology to implement CRUD operations in a REST API&lt;/br&gt;
Note that this is suggested by me and you can alter this as per your requirement.
Resource	POST	GET	PUT	DELETE
/dog	Create a new dog	List dogs	Replace dogs with new dogs(Bulk update)	 Delete all dogs
/dog/1234	Error	 Show dog	If exist update dog else ERROR	 Delete dog
 
I know there is a confusion resolve around PUT and DELETE&lt;/br&gt;
Read more here and here to clarify.
3&lt;/br&gt;
Error Handling
Error handling is one that get less attention but most important part of the any REST API&lt;/br&gt;
You must give hints as possible for the API consumers about the error and why it has occurred&lt;/br&gt;
Also make you that through the API you should provide granular level error messages&lt;/br&gt;
You can format it as follows.

{
   &quot;status&quot;: 401,
   &quot;error_code&quot;: 2005,
   &quot;error_message&quot;: &quot;Authentication token has expired&quot;,
   &quot;more_info&quot;: &quot;http://dasunhegoda.com/api/doc/token_error&quot;
}
1
2
3
4
5
6
{
   &quot;status&quot;: 401,
   &quot;error_code&quot;: 2005,
   &quot;error_message&quot;: &quot;Authentication token has expired&quot;,
   &quot;more_info&quot;: &quot;http://dasunhegoda.com/api/doc/token_error&quot;
}
You can make use of HTTP status code for this purpose.
4&lt;/br&gt;
API Versioning
In any given API API version is mandatory to maintain consistency&lt;/br&gt;
It can be done in many way but below is the preferred methods by me.
Method 1
You can use the letter ‘v’ in the URL to denote the API version as below.

http://dasunhegoda.com/api/v2/dog/1234
1
http://dasunhegoda.com/api/v2/dog/1234
Method 2
You can use the addional parameter at the end of the URL.

http://dasunhegoda.com/api/dog/1234?v=2.0
1
http://dasunhegoda.com/api/dog/1234?v=2.0
Different people have different opinion on API version&lt;/br&gt;
You can read more here.
5&lt;/br&gt;
Filtering
Don’t provide unnecessary data to the API consumers&lt;/br&gt;
It will clutter you REST API unnecessarily&lt;/br&gt;
Let the developer choose what he needs&lt;/br&gt;
For this we can use filtering methods in our APIs.

/dogs/1234?value1,value2,value3,value4
1
/dogs/1234?value1,value2,value3,value4
Also you can use pagination for this purpose as well where you don’t have to return all the results at once&lt;/br&gt;
Below query will be familiar to you since it operates same as MySQL works.

/dogs?limit=25&amp;offset=20

You can read more &lt;a href=&quot;http://stackoverflow.com/questions/5020704/how-to-design-restful-search-filtering&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.
1
2
3
/dogs?limit=25&amp;offset=20
 
You can read more &lt;a href=&quot;http://stackoverflow.com/questions/5020704/how-to-design-restful-search-filtering&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.
6&lt;/br&gt;
Security
Security is one of the major concerns when compared to SOAP because still there are no standards such as ws-security defined for REST.
You can use HTTPS across your APIs.
Don’t forget to include timestamp in each and every API request and response&lt;/br&gt;
Make sure to log them all&lt;/br&gt;
In case of a dispute you can refer them.
Use a access_token to make sure that API is invoked by the trust parties&lt;/br&gt;
Beforehand you have to deliver the access_token whereas only API consumers have an access_token can invoke the API&lt;/br&gt;
Read more.
7&lt;/br&gt;
Analytics
Once you start logging each and every API request and response you can build a analytical platform on top of that&lt;/br&gt;
If the number of records are high you might have to consider technologies such as BigData&lt;/br&gt;
Having analytics in your REST API will give you a good insight of what’s happening your API.
8&lt;/br&gt;
Documentation
Proper Documentation is vital for the API&lt;/br&gt;
It doesn’t matter how great your API design is if the API consumers can’t used it properly&lt;/br&gt;
You can use tools such as apidocjs for this purpose&lt;/br&gt;
It’s really easy to get started.
9&lt;/br&gt;
Stability and Consistency
Depending on your requirement you should consider highly available architecture for you REST API&lt;/br&gt;
If you are wondering how to implement high availability in your REST API I have an article written on the subject&lt;/br&gt;
Please refer here.
10&lt;/br&gt;
URL Structure
You have to structure the URL in manner it’s intuitive&lt;/br&gt;
Select a domain which is easy for marking as well&lt;/br&gt;
eg :- api.yourdomain.com&lt;/br&gt;
When structuring your REST API you can use the following format.
GET tasks/5/messages – Retrieves list of messages for task #5
GET tasks/5/messages/10 – Retrieves the 10th messages for task #5
POST tasks/5/messages – Create a new message for task #5
DELETE tasks/5/messages/10 – Delete the 10th messages of task #5
PUT tasks/5/messages/12 – Update the 12th messages of task #5
If you have developed your REST API properly you should have above features in it&lt;/br&gt;
In other words above should be kept in mind when designing your REST API&lt;/br&gt;
So that’s it about REST API architecture&lt;/br&gt;
If you have any questions let me know in the comments below&lt;/br&gt;
Your feedback is highly appreciated(happy-face)
&lt;/html&gt;</description>
        <pubDate>Thu, 14 Dec 2017 04:18:00 +0000</pubDate>
        <link>http://hellodk.in///travel_diaries</link>
        <guid isPermaLink="true">http://hellodk.in///travel_diaries</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Python regex Simplified</title>
        <description>&lt;h2&gt;&lt;u&gt;Introduction&lt;/u&gt;&lt;/h2&gt;

&lt;h3&gt;Python regex metacharacters&lt;/h3&gt;
. ^ $ * + ? { } [ ] \ | ( )

&lt;p&gt;

1. [] - 

Negate - ^

Escape Character - \


The first metacharacters we’ll look at are [ and ]. They’re used for specifying a character class, which is a set of characters that you wish to match. Characters can be listed individually, or a range of characters can be indicated by giving two characters and separating them by a &#39;-&#39;. For example, [abc] will match any of the characters a, b, or c; this is the same as [a-c], which uses a range to express the same set of characters. If you wanted to match only lowercase letters, your RE would be [a-z].

Metacharacters are not active inside classes. For example, [akm$] will match any of the characters &#39;a&#39;, &#39;k&#39;, &#39;m&#39;, or &#39;$&#39;; &#39;$&#39; is usually a metacharacter, but inside a character class it’s stripped of its special nature.

You can match the characters not listed within the class by complementing the set. This is indicated by including a &#39;^&#39; as the first character of the class; &#39;^&#39; outside a character class will simply match the &#39;^&#39; character. For example, [^5] will match any character except &#39;5&#39;.

Perhaps the most important metacharacter is the backslash, \. As in Python string literals, the backslash can be followed by various characters to signal various special sequences. It’s also used to escape all the metacharacters so you can still match them in patterns; for example, if you need to match a [ or \, you can precede them with a backslash to remove their special meaning: \[ or \\.

Some of the special sequences beginning with &#39;\&#39; represent predefined sets of characters that are often useful, such as the set of digits, the set of letters, or the set of anything that isn’t whitespace.

Let’s take an example: \w matches any alphanumeric character. If the regex pattern is expressed in bytes, this is equivalent to the class [a-zA-Z0-9_]. If the regex pattern is a string, \w will match all the characters marked as letters in the Unicode database provided by the unicodedata module. You can use the more restricted definition of \w in a string pattern by supplying the re.ASCII flag when compiling the regular expression.

The following list of special sequences isn’t complete. For a complete list of sequences and expanded class definitions for Unicode string patterns, see the last part of Regular Expression Syntax in the Standard Library reference. In general, the Unicode versions match any character that’s in the appropriate category in the Unicode database.

\d
Matches any decimal digit; this is equivalent to the class [0-9].
\D
Matches any non-digit character; this is equivalent to the class [^0-9].
\s
Matches any whitespace character; this is equivalent to the class [ \t\n\r\f\v].
\S
Matches any non-whitespace character; this is equivalent to the class [^ \t\n\r\f\v].
\w
Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_].
\W
Matches any non-alphanumeric character; this is equivalent to the class [^a-zA-Z0-9_].
These sequences can be included inside a character class. For example, [\s,.] is a character class that will match any whitespace character, or &#39;,&#39; or &#39;.&#39;.

The final metacharacter in this section is .. It matches anything except a newline character, and there’s an alternate mode (re.DOTALL) where it will match even a newline. &#39;.&#39; is often used where you want to match “any character”.
&lt;/p&gt;</description>
        <pubDate>Thu, 13 Jul 2017 03:30:00 +0000</pubDate>
        <link>http://hellodk.in///python_regex_simplified</link>
        <guid isPermaLink="true">http://hellodk.in///python_regex_simplified</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Over Exposed Photos</title>
        <description>&lt;h1&gt;UPDATING SOON&lt;/h1&gt;</description>
        <pubDate>Wed, 12 Jul 2017 12:30:00 +0000</pubDate>
        <link>http://hellodk.in///overexposed_photos</link>
        <guid isPermaLink="true">http://hellodk.in///overexposed_photos</guid>
        
        <category>photography</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Mac Shortcuts</title>
        <description>&lt;h3&gt;Keyboard Tips&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The Delete key works like Backspace if you are from other platforms. To delete on the other direction, press Fn + Delete&lt;/li&gt;
&lt;li&gt;The Backspace will feel slow by default. This can be changed in Keyboard Preferences by making &quot;Key Repeat&quot; fast &amp; &quot;Delay Until Repeat&quot; short. Ref: http://forums.macrumors.com/showthread.php?t=508385 &lt;/li&gt;
&lt;li&gt;If you are missing Home &amp; End keys, it is Command+ Left Arrow &amp; Command + Right Arrow&lt;/li&gt;
&lt;li&gt;If you are missing Page Up &amp; Down keys, it is Command+ Up Arrow &amp; Command + Down Arrow&lt;/li&gt;
 
&lt;h3&gt;Mouse/Trackpad Tips:&lt;/h3&gt;
To Drag something, Select Text, you can press the mouse button and drag it. If you are familiar with Double Tap &amp; Drag like in Windows, Linux, You can have the same settings enabled in System Preferences &gt; Universal Access &gt; Mouse &amp; Trackpad &gt;Trackpad Options -&gt; Enable Dragging Without Lock. Ref: http://chris.dziemborowicz.com/blog/2012/07/04/enable-double-tap-to-drag-in-mac-os-x-lion/
 
Navigation:
Command+Down To Open a Folder/File or to launch an application from keyboard
Command + Up   To go one level up in finder
Ctrl + Up             To Bring Mission Control
Command + tilde  To Switch windows of same App
Command + h       To hide the window
/                          To enter/paste a path in Finder Window (Open, Save Dialog boxes)
 
Terminal:
Ctrl+a  To go to the beginning of line, Ctrl+e to go the end of line. The Link has more shortcuts: http://apple.stackexchange.com/questions/12997/can-home-and-end-keys-be-mapped-when-using-terminal
Tweaks:
Show Full Path in the title bar:
defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES
killall Finder
 Ref: http://osxdaily.com/2007/12/02/show-full-directory-path-in-finder-window-title-bars/
Copy Path of selected Folder/File:
Ref: http://osxdaily.com/2013/06/19/copy-file-folder-path-mac-os-x/</description>
        <pubDate>Wed, 05 Jul 2017 10:18:00 +0000</pubDate>
        <link>http://hellodk.in///mac_shortcuts</link>
        <guid isPermaLink="true">http://hellodk.in///mac_shortcuts</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Yum Commands - A quick jist</title>
        <description>&lt;ol&gt;
&lt;li&gt;&lt;h5&gt;To make a search of some package or term in the data base in some of the formed deposits yum in the system:&lt;/h5&gt;&lt;/li&gt;
&lt;/br&gt;
&lt;p&gt;Syntax: &lt;span style=&quot;font-family: courier new,courier;&quot;&gt;yum search any-package&lt;/span&gt;&lt;/p&gt;
Example: &lt;code&gt;yum search httpd&lt;/code&gt;
&lt;h5&gt;To consult the information contained in a package in individual:&lt;/h5&gt;
&lt;/br&gt;yum info any-package
&lt;/br&gt;Example: yum info httpd
&lt;/br&gt;&lt;/br&gt;Uninstalling packages. Desinstalación of packages along with everything what it depends on these:
&lt;/br&gt;yum remove any-package
&lt;/br&gt;Example: yum remove gkrellm
&lt;/br&gt;The following thing will list all the packages available in the data base yum and that can settle:
&lt;/br&gt;available yum list|less
&lt;/br&gt;The following thing will list all the packages installed in the system:
&lt;/br&gt;yum list installed|less
&lt;/br&gt;The following thing will list all the packages installed in the system and that can (they must) be updated:
&lt;/br&gt;yum list updates|less
&lt;/br&gt;Cleaning of the system.
&lt;/br&gt;
&lt;p&gt;&lt;span style=&quot;font-family: courier new,courier;&quot;&gt;Yum leaves as result of its use heads and packages RPM stored in the interior of the directory located in the route /var/cache/yum/. Particularly the packages RPM that have settled can occupy much space and is by such reason agrees to eliminate them once no longer they have utility. Also it agrees to do the same with the old heads of packages that no longer are in the data base. In order to make the &lt;/br&gt;corresponding cleaning, the following thing can be executed:&lt;/span&gt;&lt;/p&gt;s
&lt;/br&gt;
&lt;/br&gt;&lt;code&gt;yum clean all&lt;/code&gt;
&lt;/br&gt;Group install:
&lt;/br&gt;&lt;code&gt;yum groupinstall &quot;groupname&quot;&lt;/code&gt;
&lt;/ol&gt;</description>
        <pubDate>Sat, 10 Jun 2017 12:20:00 +0000</pubDate>
        <link>http://hellodk.in///yum_commands_quick_reference</link>
        <guid isPermaLink="true">http://hellodk.in///yum_commands_quick_reference</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>Configure multiple SSH identities for GitBash, Mac OSX, &amp; Linux</title>
        <description>&lt;p&gt;
&lt;/p&gt;</description>
        <pubDate>Wed, 26 Apr 2017 13:18:00 +0000</pubDate>
        <link>http://hellodk.in///configure_multiple_ssh_identities_for_gitbash_mac_linux</link>
        <guid isPermaLink="true">http://hellodk.in///configure_multiple_ssh_identities_for_gitbash_mac_linux</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
      <item>
        <title>RabbitMQ - Detecting Dead TCP Connections with Heartbeats</title>
        <description>&lt;p&gt;
In some types of network failure, packet loss can mean that disrupted TCP connections take a moderately long time (about 11 minutes with default configuration on Linux, for example) to be detected by the operating system. AMQP 0-9-1 offers a heartbeat feature to ensure that the application layer promptly finds out about disrupted connections (and also completely unresponsive peers). Heartbeats also defend against certain network equipment which may terminate &quot;idle&quot; TCP connections. See Heartbeats for details.
&lt;/p&gt;

&lt;h4&gt;&lt;u&gt;At the Broker&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
In order to avoid losing messages in the broker we need to cope with broker restarts, broker hardware failure and in extremis even broker crashes.
&lt;/p&gt;
&lt;p&gt;
To ensure that messages and broker definitions survive restarts, we need to ensure that they are on disk. The AMQP standard has a concept of durability for exchanges, queues and of persistent messages, requiring that a durable object or persistent message will survive a restart. More details about specific flags pertaining to durability and persistence can be found in the AMQP Concepts Guide.
&lt;/p&gt;
&lt;h4&gt;&lt;u&gt;Clustering and High Availability&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
If we need to ensure that our broker survives hardware failure, we can use RabbitMQ&#39;s clustering. In a RabbitMQ cluster, all definitions (of exchanges, bindings, users, etc) are mirrored across the entire cluster. Queues behave differently, by default residing only on a single node, but optionally being mirrored across several or all nodes. Queues remain visible and reachable from all nodes regardless of where they are located.
&lt;/p&gt;
&lt;p&gt;
Mirrored queues replicate their contents across all configured cluster nodes, tolerating node failures seamlessly and without message loss (although see this note on unsynchronised slaves). However, consuming applications need to be aware that when queues fail their consumers will be cancelled and they will need to reconsume - see the documentation for more details.
&lt;/p&gt;
At the Producer
&lt;p&gt;
When using confirms, producers recovering from a channel or connection failure should retransmit any messages for which an acknowledgement has not been received from the broker. There is a possibility of message duplication here, because the broker might have sent a confirmation that never reached the producer (due to network failures, etc). Therefore consumer applications will need to perform deduplication or handle incoming messages in an idempotent manner.
&lt;/p&gt;
&lt;h4&gt;&lt;u&gt;Ensuring Messages are Routed&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
In some circumstances it can be important for producers to ensure that their messages are being routed to queues (although not always - in the case of a pub-sub system producers will just publish and if no consumers are interested it is correct for messages to be dropped).
&lt;/p&gt;
&lt;p&gt;
To ensure messages are routed to a single known queue, the producer can just declare a destination queue and publish directly to it. If messages may be routed in more complex ways but the producer still needs to know if they reached at least one queue, it can set the mandatory flag on a basic.publish, ensuring that a basic.return (containing a reply code and some textual explanation) will be sent back to the client if no queues were appropriately bound.
&lt;/p&gt;
&lt;p&gt;
Producers should also be aware that when publishing to a clustered node, if one or more destination queues that are bound to the exchange have mirrors in the cluster, it&#39;s possible to incur delays in the face of network failures between nodes, due to flow control between replicas and the master queue process. See here for more details.
&lt;/p&gt;
&lt;h4&gt;&lt;u&gt;At the Consumer&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
In the event of network failure (or a node crashing), messages can be duplicated, and consumers must be prepared to handle them. If possible, the simplest way to handle this is to ensure that your consumers handle messages in an idempotent way rather than explicitly deal with deduplication.
&lt;/p&gt;
&lt;p&gt;
If a message is delivered to a consumer and then requeued (because it was not acknowledged before the consumer connection dropped, for example) then RabbitMQ will set the redelivered flag on it when it is delivered again (whether to the same consumer or a different one). This is a hint that a consumer may have seen this message before (although that&#39;s not guaranteed, the message may have made it out of the broker but not into a consumer before the connection dropped). Conversely if the redelivered flag is not set then it is guaranteed that the message has not been seen before. Therefore if a consumer finds it more expensive to deduplicate messages or process them in an idempotent manner, it can do this only for messages with the redelivered flag set.
&lt;/p&gt;
&lt;h4&gt;&lt;u&gt;Consumer Cancel Notification&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
Under some circumstances the server needs to be able to cancel a consumer - since the queue it was consuming from has been deleted, or has failed over. In this case the consumer should consume again but be aware that it may see messages again which it has already seen.
&lt;/p&gt;
&lt;code&gt;Note that consumer cancel notification is a RabbitMQ extension to AMQP, and as such may not be supported by all clients.&lt;/code&gt;
&lt;/br&gt;&lt;/br&gt;
&lt;h4&gt;&lt;u&gt;Messages That Cannot Be Processed&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
If a consumer determines that it cannot handle a message then it can reject it using basic.reject (or basic.nack), either asking the server to requeue it, or not (in which case the server might be configured to dead-letter it instead.
&lt;/p&gt;
&lt;h4&gt;&lt;u&gt;Distributed RabbitMQ&lt;/u&gt;&lt;/h4&gt;
&lt;p&gt;
Rabbit provides two plugins to assist with distributing nodes over unreliable networks: federation and the shovel. Both are implemented as AMQP clients, so if you configure them to use confirms and acknowledgements, they will retransmit when necessary. Both will use confirms and acknowledgements by default.
&lt;/p&gt;
&lt;p&gt;
When connecting clusters with federation or the shovel, it is desirable to ensure that the federation links and shovels tolerate node failures. Federation will automatically distribute links across the downstream cluster and fail them over on failure of a downstream node. In order to connect to a new upstream when an upstream node fails you can specify multiple redundant URIs for an upstream, or connect via a TCP load balancer.
&lt;/p&gt;
&lt;p&gt;
When using the shovel, it is possible to specify redundant brokers in a source or destination clause; however it is not currently possible to make the shovel itself redundant. We hope to improve this situation in the future; in the mean time a new node can be brought up manually to run a shovel if the node it was originally running on fails.
&lt;/p&gt;</description>
        <pubDate>Mon, 24 Apr 2017 12:18:00 +0000</pubDate>
        <link>http://hellodk.in///detecting-dead-tcp-connections</link>
        <guid isPermaLink="true">http://hellodk.in///detecting-dead-tcp-connections</guid>
        
        <category>tutorials</category>
        
        
        <category>dk</category>
        
      </item>
    
  </channel>
</rss>
