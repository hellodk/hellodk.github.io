<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>hellodk.github.io/</title>
   
   <link>http://hellodk.github.io/</link>
   <description>A beautiful narrative written an elegant publishing platform. The story begins here.</description>
   <language>en-uk</language>
   <managingEditor> Deepak Kumar Gupta</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>RethinkDb installation on Ubuntu-14.04</title>
	  <link>//rethinkdb_installation_on%20_ubuntu-14.04</link>
	  <author>Deepak Kumar Gupta</author>
	  <pubDate>2016-01-28T15:48:00+05:30</pubDate>
	  <guid>//rethinkdb_installation_on%20_ubuntu-14.04</guid>
	  <description><![CDATA[
	     <p>Let&#39;s get some hands on rethinkdb today and find it out yourself.</p>

<p>So what is rethinkdb? Well, to say...rethinkdb is an open-source, scalable JSON database built from the ground up for the realtime web. RethinkDB inverts the traditional database architecture by exposing an exciting new access model – instead of polling for changes, the developer can tell RethinkDB to continuously push updated query results to applications in realtime. RethinkDB’s realtime push architecture dramatically reduces the time and effort necessary to build scalable realtime apps. RethinkDB also offers a flexible query language, intuitive operations and monitoring APIs, and is easy to setup and learn. Just like any other database solution, rethinkdb ships as a client-server component model. The installation process for both the server and the client are illustrated below:</p>

<p>How to Install RethinkDb:
1. Add the RethinkDB PPA to your list of repositories : source /etc/lsb-release &amp;&amp; echo &quot;deb http://download.rethinkdb.com/apt $DISTRIB_CODENAME main&quot; | sudo tee /etc/apt/sources.list.d/rethinkdb.list</p>

<ol>
<li>Add the keys:</li>
</ol>

<p>wget -qO- http://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -</p>

<ol>
<li>Update the repository:</li>
</ol>

<p>sudo apt-get update</p>

<ol>
<li>Install the rethinkdb server via apt-get:</li>
</ol>

<p>sudo apt-get -y install rethinkdb</p>

<p>Install rethinkdb client:</p>

<ol>
<li>Install the python-pip package:</li>
</ol>

<p>sudo apt-get install python-pip</p>

<ol>
<li>Install the rethinkdb python client:</li>
</ol>

<p>sudo pip install rethinkdb :</p>

<p>The above steps ensure that rethinkdb is installed on the system, while it does not ensures that this will start the rethinkdb service on system startup. You still need to start the rethinkdb service using the below command</p>

<p>The above command will ensure that rethinkdb is running as a terminal process, and will exit once the terminal is closed, or the process is killed, in short it will not run rethinkdb as a background service.</p>

<p>To start rethinkdb as a service, please follow the below steps:</p>

<ol>
<li><p>Go to /etc/rethinkdb and you will get the file, default.conf.sample</p></li>
<li><p>Copy the file to /etc/rethinkdb/instances.d and rename the file as per your requirements ensuring the extension is .conf only. Say for example the file name is rethinkdb1.conf</p></li>
<li><p>Now open the file /etc/rethinkdb/instances.d/rethinkdb1.conf and modify the paramaters as per your requirements.</p></li>
<li><p>If setting up a cluster, I suggest do change the server-name to somethink like &#39;rethinkdb-primary&#39; or &#39;rethinkdb-1&#39; or &#39;master&#39; or &#39;slave&#39;. This will ensure that we have a meaningful naming convention for our cluster.</p></li>
<li><p>The default port details are :</p></li>
</ol>

<p>29015 : Rethinkdb listens for intracluster connections</p>

<p>28015 : Rethinkdb listens for client driver connections</p>

<p>8080 : Rethinkdb listens for administrative HTTP connections</p>

<p>22 : For SSH. The server uses public key authentication.</p>

<p>80 : For HTTP. It is used during the setup process but otherwise redirects to HTTPS.</p>

<p>443 : For HTTPS. An Nginx server sits between RethinkDB and the world and provides basic HTTP authentication and secure HTTPS connections for the web UI</p>

	  ]]></description>
	</item>

	<item>
	  <title>Getting started with Cassandra</title>
	  <link>//getting_familiar_with_cassandra</link>
	  <author>Deepak Kumar Gupta</author>
	  <pubDate>2016-01-28T15:48:00+05:30</pubDate>
	  <guid>//getting_familiar_with_cassandra</guid>
	  <description><![CDATA[
	     <p>The Growth of Big Data</p>

<p>Big Data is one of the key forces driving the growth and popularity of NoSQL for business. The almost limitless array of data collection technologies ranging from simple online actions to point of sale systems to GPS tools to smartphones and tablets to sophisticated sensors – and many more – act as force multipliers for data growth.</p>

<p>In fact, one of the first reasons to use NoSQL is because you have a Big Data project to tackle. A Big Data project is normally typified by:</p>

<p>High data velocity – lots of data coming in very quickly, possibly from different locations.
Data variety – storage of data that is structured, semi-structured and unstructured.
Data volume – data that involves many terabytes or petabytes in size.
Data complexity – data that is stored and managed in different locations or data centers.</p>

<p>Datamodel   Performance Scalability Flexibility Complexity  Functionality
Key-value store High    High    High    None    Variable (None)
Column Store    High    High    Moderate    Low Minimal
Document Store  High    Variable (High) High    Low Variable (Low)
Graph Database  Variable    Variable    High    High    Graph Theory</p>

<p>massively scalable open source NoSQL database. Cassandra is perfect for managing large amounts of structured, semi-structured, and unstructured data across multiple data centers and the cloud. Cassandra delivers continuous availability, linear scalability, and operational simplicity across many commodity servers with no single point of failure, along with a powerful dynamic data model designed for maximum flexibility and fast response times</p>

<p>built-for-scale architecture means that it is capable of handling petabytes of information and thousands of concurrent users/operations per second.</p>

<p>An apache Software Foundation project, Cassandra is column oriented database and is an open source distributed database management system designed to handle large amounts of data across many commodity servers, providing high availability with no single point of failure.</p>

<p>Cassandra does not support joins or subqueries. Rather, Cassandra emphasizes denormalization through features like collections</p>

<p>CQL - Cassandara Query Language</p>

<p>Each node in a cluster can accept read and write requests, regardless of where the data is actually located in the cluster.</p>

<p>When a node goes down, read/write requests can be served from other nodes in the network.</p>

<p>The key components of Cassandra are as follows −
Node − It is the place where data is stored.
Data center − It is a collection of related nodes.
Cluster − A cluster is a component that contains one or more data centers.
Commit log − The commit log is a crash-recovery mechanism in Cassandra. Every write operation is written to the commit log.
Mem-table − A mem-table is a memory-resident data structure. After commit log, the data will be written to the mem-table. Sometimes, for a single-column family, there will be multiple mem-tables.
SSTable − It is a disk file to which the data is flushed from the mem-table when its contents reach a threshold value.
Bloom filter − These are nothing but quick, nondeterministic, algorithms for testing whether an element is a member of a set. It is a special kind of cache. Bloom filters are accessed after every query.</p>

<h2>Commands:</h2>

<p>nodetool cfstats : displays statistics for each table and keyspace.
nodetool cfhistograms : provides statistics about a table, including read/write latency, row size, column count, and number of SSTables.
nodetool netstats : provides statistics about network operations and connections.
nodetool tpstats : provides statistics about the number of active, pending, and completed tasks for each stage of Cassandra operations by thread pool.
nodetool status :</p>

<p>cqlsh <machine ip> -  connects to the machine cqlsh</p>

<h2>cqlsh command list:</h2>

<p>HELP - Displays help topics for all cqlsh commands.
CAPTURE - Captures the output of a command and adds it to a file.
CONSISTENCY - Shows the current consistency level, or sets a new consistency level.
COPY - Copies data to and from Cassandra.
DESCRIBE - Describes the current cluster of Cassandra and its objects.
EXPAND - Expands the output of a query vertically.
EXIT - Using this command, you can terminate cqlsh.
PAGING - Enables or disables query paging.
SHOW - Displays the details of current cqlsh session such as Cassandra version, host, or data type assumptions.
SOURCE - Executes a file that contains CQL statements.
TRACING - Enables or disables request tracing.</p>

<h2>Upgrading:</h2>

<p>mkdir ~/cassandra<em>backup
sudo cp -r /etc/cassandra/* ~/cassandra</em>backup
sudo vi /etc/cassandra/cassandra.yaml and edit num<em>tokens to 1 and uncomment the initial</em>token and set it to 1
nodetool upgradesstables
nodetool drain
sudo service cassandra stop
sudo cp -r /etc/cassandra/* ~/cassandra<em>backup</em>new
sudo apt-get install cassandra=2.1.12
Open the old and new cassandra.yaml files and diff them.
Merge the diffs by hand, including the partitioner setting, from the old file into the new one.
Do not use the default partitioner setting in the new cassandra.yaml because it has changed in this release to the Murmur3Partitioner. The Murmur3Partitioner can only be used for new clusters. After data has been added to the cluster, you cannot change the partitioner without reworking tables, which is not practical. Use your old partitioner setting in the new cassandra.yaml file.
Save the file as cassandra.yaml.</p>

<p>Configuration file &#39;/etc/cassandra/cassandra.yaml&#39;
 ==&gt; Modified (by you or by a script) since installation.
 ==&gt; Package distributor has shipped an updated version.
   What would you like to do about it ?  Your options are:
    Y or I  : install the package maintainer&#39;s version
    N or O  : keep your currently-installed version
      D     : show the differences between the versions
      Z     : start a shell to examine the situation
 The default action is to keep your current version.
*** cassandra.yaml (Y/I/N/O/D/Z) [default=N] ? </p>

<p>************<strong><em>Inserting values into tables</em></strong>**************************
CREATE KEYSPACE tutorialspoint WITH replication = {
  &#39;class&#39;: &#39;NetworkTopologyStrategy&#39;,
  &#39;cdr_record&#39;: &#39;2&#39;
};</p>

<p>INSERT INTO tutorialspoint.emp (emp<em>id,emp</em>city,emp<em>name,emp</em>phone,emp_sal) VALUES(3,&#39;Kolkata&#39;,&#39;Stag1&#39;,8791134412,60);</p>

<p>UPDATE TABLE emp(
   emp<em>id int PRIMARY KEY,
   emp</em>name text,
   emp<em>city text,
   emp</em>sal varint,
   emp_phone varint);</p>

<p>INSERT INTO TABLE emp(emp<em>id int,emp</em>name,emp<em>city,emp</em>sal,emp_phone) VALUES(1,&#39;dk&#39;,&#39;Bangalore&#39;,24,9964014500);</p>

<p>/usr/local/freeswitch/bin/fs_cli -x &quot;originate  freetdm/8/a/009716337516 &amp;park()&quot;</p>

<h2>Nodetool Command Set:</h2>

<p>nodetool status
nodetool info
nodetool -host 10.60.8.23 ring</p>

	  ]]></description>
	</item>

	<item>
	  <title>5 interesting cloud predictions for 2016</title>
	  <link>//5_interesting_cloud_predictions_2016</link>
	  <author>Deepak Kumar Gupta</author>
	  <pubDate>2016-01-28T15:48:00+05:30</pubDate>
	  <guid>//5_interesting_cloud_predictions_2016</guid>
	  <description><![CDATA[
	     <ol>
<li>It&#39;s time for IOT-</li>
</ol>

<p>The IOT or the Internet of Things has been a buzzword around for quite some time. And finally the time has come for IOT to be on boom. It is predicted that by the end of 2016, there will be one billion connected devices.</p>

<p>The Internet of Things is all set to harness the awesomeness of Cloud computing this year. IOT and Cloud combined together breaks free all limitations. The duo combo can help right from analyzing the weather conditions at your home and water the plants to conducting major surgeries remotely to powering drones for military, logistics etc. and what not!!</p>

<ol>
<li>Cloud is expanding - AWS coming to India in 2016. Owing to the huge demand in the Indian sub-continent for Cloud services, AWS(Amazon Web Services)- one of the top cloud services provider has plans to setup India region in 2016. Do I still need to say anything more on this?</li>
</ol>

<p>More and more startups will be focusing towards adapting cloud culture - Cloud is so versatile and flexible, it allows you to work from any corner of the world. Startups ideally do not have the infrastructure/resources to manage their own data-centers or hardware. Cloud provides then with Infrastructure as a Service at a very affordable rates, so they can focus more on their product.</p>

<ol>
<li><p>Outcast for more flexible cloud apps – The need for more flexible cloud apps can not be denied. With the rise in clod computing, will come the rise for ease of accessibility. This will trigger quiet a lot of cloud apps to outcast in the near future, similar to AWS CLI.</p></li>
<li><p>With the rise in better internet services and bandwidth in the second and third world&#39;s Dockerization/containerization will be emerging as a critical technology and on rise and will soon be a critical component in deployments.</p></li>
<li><p>Security - Cloud security should be a major concern for everyone working on cloud/IOT. One should perform a security assessment before starting their design. For IOT&#39;s, using an RTOS does not ensure security and neither does Encryption. One should ensure all attack vectors are addressed. Even if you are able to secure the cloud, rest assured it may not be enough because your device can still be compromised.</p></li>
</ol>

	  ]]></description>
	</item>

	<item>
	  <title>Understanding Git-Flow</title>
	  <link>//understanding_git_flow</link>
	  <author>Deepak Kumar Gupta</author>
	  <pubDate>2015-11-09T00:00:00+05:30</pubDate>
	  <guid>//understanding_git_flow</guid>
	  <description><![CDATA[
	     <p>Understanding Git Flow for(ubuntu-14.04):</p>

<p>what is git flow?
Usage?
How can it be helpful?</p>

<p>Install git flow using the below command:</p>

<p>sudo apt-get install git-flow</p>

<p>Starting with git flow:
To start with git flow, you first need to initialize it inside an existing repository. This is done by using the below command:</p>

<p>git flow init</p>

<p>In-case you want to force re-initialization of git flow, you can use the same command and pass -f as an argument
eg: git flow init -f</p>

<p>So far cool, this is dead simple, isn&#39;t it? Now let&#39;s see what happens once we do a git flow init. We&#39;ll have to answer a few questions regarding the naming conventions for our branches. For simplicity it is recommended to use the default values.</p>

<p>$ git flow init -f</p>

<p>Which branch should be used for bringing forth production releases?
   - develop
   - feature/lint_cleanup
   - master
Branch name for production releases: [master] </p>

<p>Which branch should be used for integration of the &quot;next release&quot;?
   - develop
   - feature/lint_cleanup
Branch name for &quot;next release&quot; development: [develop] </p>

<p>How to name your supporting branch prefixes?
Feature branches? [feature/] 
Release branches? [release/] 
Hotfix branches? [hotfix/] 
Support branches? [support/] 
Version tag prefix? [] </p>

<p>Creating/Deleting a tag:</p>

<p>Deleting a tag:</p>

<p>$ git tag -d <tag_name></p>

	  ]]></description>
	</item>

	<item>
	  <title>Going Agntless with Ansible</title>
	  <link>//going_agentless_with_ansible</link>
	  <author>Deepak Kumar Gupta</author>
	  <pubDate>2015-04-06T15:48:00+05:30</pubDate>
	  <guid>//going_agentless_with_ansible</guid>
	  <description><![CDATA[
	     <p>While looking for a light yet powerful Configuration Management tool, I was going through some of the various available tools, and came across Ansible. After having a quick look at the features, something which caught my attention: &quot;Ansible is agent-less&quot;, hence I decided to give it a try. Having used Ansible for some around more than 8+ months configuration management, I personally feel...Ansible is awesome!!
So what is Ansible? Well, it is a configuration management tool, and it empowers you to configure/orchestrate multiple systems at great ease, saving a lot of downtime and resources.
So how does it does that? The answer lies with ssh keys based agent forwarding. Ansible uses ssh for logging to the remote system, and can execute package installation, shell commands, install/update package management systems, clone git and anything under the sun you need for configuration management.
So why don&#39;t you try your hands on Ansible and experience it&#39;s awesomeness....all you need to do is to install it on your host system.</p>

<p>Ansible does not have it&#39;s own process, and unlike other configuration tolls available, it is agent-less!!</p>

<p>Ansible ships in 2 forms:
1. Core Ansible
2. Ansible Tower</p>

<p>Installation:
1. OS package manager:
sudo apt-get install software-properties-common
sudo apt-add-repository ppa:ansible/ansiblesudo apt-get update
sudo apt-get install ansible
2. Via python pip:
sudo pip install ansible</p>

<p>Ansible uses a configuration file, called host files for doing ssh to the remote machines. By default it is located in /etc/ansible/hosts
All you need to do is to add the host ip and the ssh_username to the file, and the public key of your host to the remote machine and you are all set to go!!</p>

<p>Commands:
ansible all -i ansible_hosts -m ping
ansible all -m ping -u deepak
ansible -m shell -a &#39;free -m&#39; host1
ansible all -m shell -a &#39;free -m&#39; -u dk</p>

<p>Playbooks are Ansible’s configuration, deployment, and orchestration language. They can describe a policy you want your remote systems to enforce, or a set of steps in a general IT process.</p>

<p>Playbooks are written in YAML language, and comprises of Plays</p>

<p>Running a Playbook in Ansible:
ansible-playbook playbook.yml -f 10</p>

	  ]]></description>
	</item>


</channel>
</rss>
