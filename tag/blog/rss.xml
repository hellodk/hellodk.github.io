<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>hellodk.github.io/</title>
   
   <link>http://hellodk.github.io/</link>
   <description>A beautiful narrative written an elegant publishing platform. The story begins here.</description>
   <language>en-uk</language>
   <managingEditor> Deepak Kumar Gupta</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Linux tar commands examples</title>
	  <link>//linux_tar_examples</link>
	  <author>Deepak Kumar Gupta</author>
	  <pubDate>2016-02-23T19:13:00+05:30</pubDate>
	  <guid>//linux_tar_examples</guid>
	  <description><![CDATA[
	     <ol>
<li><p>Create a tar archive of a directory
In this example we will come to know basic tar command using option ‘cvf’ to create a tar archive.
Here we are creating a tar file ‘my-archive.tar’ for a directory ‘/home/my-directory’ in current working directory:
1
[root@chasiota /]# tar cvf my-archive.tar /home/my-directory
c – Creates a new .tar archive file
v – Verbosely list files which are processed
f – File name type of the archive file</p></li>
<li><p>Create a zipped archive
In order to make tar ball as zipped archive , we need to use the option “z”.
In below example the command will make “my-archive.tar.gz” for a directory “/home/my-directory” in current working directory.
1
[root@chasiota /]# tar cvzf my-archive.tar.gz /home/my-directory</p></li>
<li><p>List the contents of a tar archive
To list the contents of an uncompressed tar archive, just replace the cflag with the tflag, like this:
1
[root@chasiota /]# tar tvf my-archive.tar
This lists all the files in the archive, but does not extract them.
To list all the files in a compressed archive, add the zflag like before:
1
[root@chasiota /]# tar tzvf my-archive.tgz
or for a tar.gz archive:
1
[root@chasiota /]# tar tzvf my-archive.tar.gz</p></li>
<li><p>Extract tar archive contents
To extract the contents of a Linux tar archive, now just replace the tflag with the x(“extract”) flag. For uncompressed archives the extract command looks like this:
1
[root@chasiota /]# tar xvf my-archive.tar
For compressed archives the tar extract command looks like this:
1
[root@chasiota /]# tar xzvf my-archive.tar.gz
or this for *.tgz:
1
[root@chasiota /]# tar xzvf my-archive.tgz</p></li>
<li><p>Extract tar.bz2 archive contents
In order to extract the contents of a *.tar.bz2 file the options are “xj”.
1
[root@chasiota /]# tar xvjf my-archive.tar.bz2</p></li>
<li><p>Extract a single file from tar archive
To extract a specific file from a tar archive, specify the file name at the end of the tar xvf command as shown below. The following command extracts only a specific file (my-file.sh) in the current directory from a large tar file.
1
[root@chasiota /]# tar xvf my-archive.tar my-file.sh</p></li>
<li><p>Create a compressed archive of the current directory
Many times when using the Linux tar command you will want to create an archive of all files in the current directory, including all subdirectories. You can easily create this archive like this:
1
[root@chasiota /]# tar czvf my-directory.tgz .
In the above example, the ‘.’ at the end of the command is how you refer to the current directory.</p></li>
<li><p>Create an archive in a different directory
You may also want to create a new tar archive like that previous example in a different directory, like this:
1
[root@chasiota /]# tar czvf /tmp/my-directory.tgz .
As you can see, you just add a path before the name of your tar archive to specify what directory the archive should be created in.</p></li>
<li><p>Extract a single directory from tar archive
To extract a single directory (along with its subdirectory and files) from a tar archive, specify the directory name at the end of the tar xvf command as shown below. The following extracts only a specific directory from a large tar file:
1
[root@chasiota /]# tar xvf my-archive.tar home/my-directory/</p></li>
<li><p>Extract a single directory from tar.gz archive
We just need to add “z” to the above extract command “xvf”
1
[root@chasiota /]# tar xvzf my-archive.tar.gz home/my-directory/</p></li>
<li><p>Check the size of the tar, tar.gz and tar.bz2 Archive File
For any tar, tar.gz and tar.bz2 archive file, the below commands will display the size of archive file in Kilobytes (KB):
1
[root@chasiota /]# tar -cf - my-archive.tar | wc -l
1
[root@chasiota /]# tar -czf - my-archive.tar.gz | wc -l
1
[root@chasiota /]# tar -cjf  - my-archive.tar.bz2 | wc -l</p></li>
<li><p>Verify integrity of tar file
As part of creating a tar file, you can verify the integrity of the archive file that got created using the option “W” as shown below:
1
[root@chasiota /]# tar tvfW my-archive.tar
If an output line starts with Verify, and there is no differs line then the file/directory is OK. If not, you should investigate the issue.
Note: for a compressed archive file ( *.tar.gz, *.tar.bz2 ) you cannot do the verification.</p></li>
<li><p>Find the difference between an archive and file system
Finding the difference between an archive and file system can be done even for a compressed archive. It also shows the same output as above excluding the lines with Verify.
Finding the difference between gzip archive file and file system:
1
[root@chasiota /]# tar dfz my-archive.tgz
Finding the difference between bzip2 archive file and file system:
1
[root@chasiota /]# tar dfj my-archive.tar.bz2</p></li>
<li><p>Delete a file from tar ball
You can use the following syntax to delete a file from a tar ball:
1
[root@chasiota /]# tar --delete -f my-archive.tar home/my-file</p></li>
<li><p>Add a file to an existing archive
You can add additional files to an existing tar archive with “r” option:
1
[root@chasiota /]# tar rvf my-archive.tar my-file</p></li>
<li><p>Add a directory to an existing archive
Adding a directory is also the same. We need to mention the directory name instead of the file name:
1
[root@chasiota /]# tar rvf my-archive.tar my-dir/</p></li>
<li><p>Extract group of files from tar, tar.gz, tar.bz2 archives using regular expression
You can specify a regular expressions , to extract files matching a specified pattern. For example, the following tar command extracts all the files whose file ends with .java:
1
[root@chasiota /]# tar xvf my-archive.tar  --wildcards &#39;*.java&#39;</p></li>
<li><p>Untar multiple files from tar, tar.gz and tar.bz2 File
To extract or untar multiple files from the tar, tar.gz and tar.bz2 archive file. For example the below command will extract “my-file-1” “my-file-2” and “my-file-3” from the archive files:
1
[root@chasiota /]# tar -xvf my-archive.tar &quot;my-file-1&quot; &quot;my-file-2&quot; &quot;my-file-3&quot;
1
[root@chasiota /]# tar -zxvf my-archive.tar.gz &quot;my-file-1&quot; &quot;my-file-2&quot; &quot;my-file-3&quot;
1
[root@chasiota /]# tar -jxvf my-archive.tar.bz2 &quot;my-file-1&quot; &quot;my-file-2&quot; &quot;my-file-3&quot;</p></li>
<li><p>Restore files with tar
More important than performing regular backups is having them available when we need to recover important files. The following command will restore all files from the full-backup-Day-Month-Year.tar archive, which is an example backup of our home directory:
1
[root@chasiota /]# tar xpf /dev/st0/full-backup-Day-Month-Year.tar
The p option preserves permissions; file protection information will be remembered.</p></li>
<li><p>Check the manual page for tar
You can always refer to the manual page for all available tar commands:
1
[root@chasiota /]# man tar</p></li>
</ol>

	  ]]></description>
	</item>

	<item>
	  <title>Rethinkdb Title</title>
	  <link>//rethinkdb</link>
	  <author>Deepak Kumar Gupta</author>
	  <pubDate>2014-09-27T15:48:00+05:30</pubDate>
	  <guid>//rethinkdb</guid>
	  <description><![CDATA[
	     <!DOCTYPE html>
<html>
<head>
<title>HTML5, CSS3 and JavaScript demo</title>
</head>
<body>
<!-- Start your code here -->
  <font color=black font-family: "Times New Roman", Times, serif;><h3><u>RethinkDb Installation on Ubuntu-14.04</u>
  </font></h3>
<!--p class="lw">Hello Weaver!</p-->

<p>Hey guys, hope you all are doing well. In this blog we're gonna setup rethinkdb server on an ubuntu box.</p>

<p>Before we get into the process of making our hands dirty, let's  first understand why rethinkdb?</p>

<p>Well...rethinkdb is an open-source, scalable JSON database built from the ground up for the realtime web. RethinkDB inverts the traditional database architecture by exposing an exciting new access model – instead of polling for changes, the developer can tell RethinkDB to continuously push updated query results to applications in realtime.</p>
<p>RethinkDB’s realtime push architecture dramatically reduces the time and effort necessary to build scalable realtime apps. RethinkDB also offers a flexible query language, intuitive operations and monitoring APIs, and is easy to setup and learn. Just like any other database solution, rethinkdb ships as a client-server component model. The installation process for both the server and the client are illustrated below:</p>

<p>1. Add the RethinkDB PPA to your list of repositories :</p> source /etc/lsb-release && echo "deb http://download.rethinkdb.com/apt $DISTRIB_CODENAME main" | sudo tee /etc/apt/sources.list.d/rethinkdb.list
<br>
<br>
2. Add the keys:
<br>
<br>  
wget -qO- http://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -<br><br>

3. Update the repository:<br><br>

sudo apt-get update<br><br>

4. Install the rethinkdb server via apt-get:<br><br>

sudo apt-get -y install rethinkdb<br><br>

Install rethinkdb client:<br><br>

1. Install the python-pip package:<br><br>

sudo apt-get install python-pip<br><br>

2. Install the rethinkdb python client:<br><br>

sudo pip install rethinkdb :<br><br>

The above steps ensure that rethinkdb is installed on the system, while it does not ensures that this will start the rethinkdb service on system startup. You still need to start the rethinkdb service using the below command<br><br>

The above command will ensure that rethinkdb is running as a terminal process, and will exit once the terminal is closed, or the process is killed, in short it will not run rethinkdb as a background service.
<br><br>
To start rethinkdb as a service, please follow the below steps:<br><br>

1. Go to /etc/rethinkdb and you will get the file, default.conf.sample
<br><br>
2. Copy the file to /etc/rethinkdb/instances.d and rename the file as per your requirements ensuring the extension is .conf only. Say for example the file name is rethinkdb1.conf<br><br>

3. Now open the file /etc/rethinkdb/instances.d/rethinkdb1.conf and modify the paramaters as per your requirements.<br><br>

4. If setting up a cluster, I suggest do change the server-name to somethink like 'rethinkdb-primary' or 'rethinkdb-1' or 'master' or 'slave'. This will ensure that we have a meaningful naming convention for our cluster.<br><br>

5. The default port details are :<br><br>

29015 : Rethinkdb listens for intracluster connections<br><br>

28015 : Rethinkdb listens for client driver connections<br><br>

8080 : Rethinkdb listens for administrative HTTP connections<br><br>

22 : For SSH. The server uses public key authentication.<br><br>

80 : For HTTP. It is used during the setup process but otherwise redirects to HTTPS.
<br><br>

443 : For HTTPS. An Nginx server sits between RethinkDB and the world and provides basic HTTP authentication and secure HTTPS connections for the web UI
<br>

<!-- End your code here -->
</body>
</html>
	  ]]></description>
	</item>


</channel>
</rss>
