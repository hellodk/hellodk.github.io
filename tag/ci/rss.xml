<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>https://hellodk.io/</title>
   
   <link>http://localhost:4000</link>
   <description>A beautiful narrative written over an elegant publishing platform. The story begins here...</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>How to achieve CI CD on Mobile Applications</title>
	  <link>//mobile_ci_cd</link>
	  <author></author>
	  <pubDate>2023-03-16T12:04:00+05:30</pubDate>
	  <guid>//mobile_ci_cd</guid>
	  <description><![CDATA[
	     <h5 id="lets-take-a-stroll-over-the-different-terminologies-we-may-come-across-during-our-journey-of-mobile-ci-cd">Letâ€™s take a stroll over the different terminologies we may come across during our journey of Mobile CI CD</h5>

<ul>
  <li>Dynamic Instrumentation</li>
</ul>

<p>Dynamic instrumentation is the technique to tweak the application at runtime and analyze the application behaviour.</p>

<p>This application tweaking is done through the injection of instrumentation code.
Essentially we are allowed to execute our debug scripts inside another process.</p>

<p>They are mainly two different types of instrumentation - Embedded, and injection
Embedded instrumentation can be done by patching the binary application with our instrumentation agent in the form of a shared library, dll, and dylib
Whereas injection will spawn the instrumentation agent as a process and will inject into the runtime environment like Android Zygote. The main reason to choose one over another is that only embedded can successfully run in a jailed environment</p>

<p>There are mutilple tools that canbe used for dynamic instrumentation:</p>
<ol>
  <li>Frida</li>
</ol>

	  ]]></description>
	</item>


</channel>
</rss>
